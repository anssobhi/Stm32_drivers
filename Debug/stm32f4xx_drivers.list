
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027cc  080027cc  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080027cc  080027cc  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027cc  080027cc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080027d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000080  08002854  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08002854  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b30  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ba2  00000000  00000000  00023be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000308  00000000  00000000  00024788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  00024a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003570  00000000  00000000  00024d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002ce1  00000000  00000000  00028290  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bcf4  00000000  00000000  0002af71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001470  00000000  00000000  00036ce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000080 	.word	0x20000080
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080026ac 	.word	0x080026ac

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000084 	.word	0x20000084
 80001e4:	080026ac 	.word	0x080026ac

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <init_systick_timer>:

#define SYSTICK_TIM_CLK 16000000UL


void init_systick_timer(uint32_t tick_hz)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b087      	sub	sp, #28
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000200:	4b15      	ldr	r3, [pc, #84]	; (8000258 <init_systick_timer+0x60>)
 8000202:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <init_systick_timer+0x64>)
 8000206:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000208:	4a15      	ldr	r2, [pc, #84]	; (8000260 <init_systick_timer+0x68>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000210:	3b01      	subs	r3, #1
 8000212:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	431a      	orrs	r2, r3
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 0202 	orr.w	r2, r3, #2
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f043 0204 	orr.w	r2, r3, #4
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 0201 	orr.w	r2, r3, #1
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	601a      	str	r2, [r3, #0]

}
 800024a:	bf00      	nop
 800024c:	371c      	adds	r7, #28
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000e014 	.word	0xe000e014
 800025c:	e000e010 	.word	0xe000e010
 8000260:	00f42400 	.word	0x00f42400

08000264 <number_to_string>:

	return days[i-1];
}

void number_to_string(uint8_t num , char *buf)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	2b09      	cmp	r3, #9
 8000274:	d809      	bhi.n	800028a <number_to_string+0x26>
	{
		buf[0] = '0';
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	2230      	movs	r2, #48	; 0x30
 800027a:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	3301      	adds	r3, #1
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	3230      	adds	r2, #48	; 0x30
 8000284:	b2d2      	uxtb	r2, r2
 8000286:	701a      	strb	r2, [r3, #0]
	}else if(num>=10 && num<99)
	{
		buf[0] = (num/10) + 48;
		buf[1] = (num%10) + 48;
	}
}
 8000288:	e01f      	b.n	80002ca <number_to_string+0x66>
	}else if(num>=10 && num<99)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b09      	cmp	r3, #9
 800028e:	d91c      	bls.n	80002ca <number_to_string+0x66>
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	2b62      	cmp	r3, #98	; 0x62
 8000294:	d819      	bhi.n	80002ca <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <number_to_string+0x74>)
 800029a:	fba2 2303 	umull	r2, r3, r2, r3
 800029e:	08db      	lsrs	r3, r3, #3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	3330      	adds	r3, #48	; 0x30
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	701a      	strb	r2, [r3, #0]
		buf[1] = (num%10) + 48;
 80002aa:	79fa      	ldrb	r2, [r7, #7]
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <number_to_string+0x74>)
 80002ae:	fba3 1302 	umull	r1, r3, r3, r2
 80002b2:	08d9      	lsrs	r1, r3, #3
 80002b4:	460b      	mov	r3, r1
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	440b      	add	r3, r1
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	3301      	adds	r3, #1
 80002c4:	3230      	adds	r2, #48	; 0x30
 80002c6:	b2d2      	uxtb	r2, r2
 80002c8:	701a      	strb	r2, [r3, #0]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	cccccccd 	.word	0xcccccccd

080002dc <time_to_string>:

char *time_to_string(RTC_time_t *rtc_time)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = ':';
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <time_to_string+0x48>)
 80002e6:	223a      	movs	r2, #58	; 0x3a
 80002e8:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <time_to_string+0x48>)
 80002ec:	223a      	movs	r2, #58	; 0x3a
 80002ee:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	789b      	ldrb	r3, [r3, #2]
 80002f4:	490b      	ldr	r1, [pc, #44]	; (8000324 <time_to_string+0x48>)
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffb4 	bl	8000264 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	4909      	ldr	r1, [pc, #36]	; (8000328 <time_to_string+0x4c>)
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ffae 	bl	8000264 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	4907      	ldr	r1, [pc, #28]	; (800032c <time_to_string+0x50>)
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffa8 	bl	8000264 <number_to_string>

	buf[8] = '\0';
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <time_to_string+0x48>)
 8000316:	2200      	movs	r2, #0
 8000318:	721a      	strb	r2, [r3, #8]

	return buf;
 800031a:	4b02      	ldr	r3, [pc, #8]	; (8000324 <time_to_string+0x48>)
}
 800031c:	4618      	mov	r0, r3
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000009c 	.word	0x2000009c
 8000328:	2000009f 	.word	0x2000009f
 800032c:	200000a2 	.word	0x200000a2

08000330 <date_to_string>:

char *date_to_string(RTC_date_t *rtc_date)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <date_to_string+0x48>)
 800033a:	222f      	movs	r2, #47	; 0x2f
 800033c:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <date_to_string+0x48>)
 8000340:	222f      	movs	r2, #47	; 0x2f
 8000342:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	490b      	ldr	r1, [pc, #44]	; (8000378 <date_to_string+0x48>)
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff8a 	bl	8000264 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	785b      	ldrb	r3, [r3, #1]
 8000354:	4909      	ldr	r1, [pc, #36]	; (800037c <date_to_string+0x4c>)
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff84 	bl	8000264 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	789b      	ldrb	r3, [r3, #2]
 8000360:	4907      	ldr	r1, [pc, #28]	; (8000380 <date_to_string+0x50>)
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff7e 	bl	8000264 <number_to_string>

	buf[8] = '\0';
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <date_to_string+0x48>)
 800036a:	2200      	movs	r2, #0
 800036c:	721a      	strb	r2, [r3, #8]

	return buf;
 800036e:	4b02      	ldr	r3, [pc, #8]	; (8000378 <date_to_string+0x48>)
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200000a8 	.word	0x200000a8
 800037c:	200000ab 	.word	0x200000ab
 8000380:	200000ae 	.word	0x200000ae

08000384 <main>:

int main (void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 800038a:	f002 f915 	bl	80025b8 <initialise_monitor_handles>
	RTC_time_t current_time;
	RTC_date_t current_date;

	Lcd_Init();
 800038e:	f000 fb41 	bl	8000a14 <Lcd_Init>
	lcd_send_string("RTC ok");
 8000392:	4830      	ldr	r0, [pc, #192]	; (8000454 <main+0xd0>)
 8000394:	f000 fb2a 	bl	80009ec <lcd_send_string>
	lcd_display_clear();
 8000398:	f000 fc25 	bl	8000be6 <lcd_display_clear>
	if(ds1307_init())
 800039c:	f000 f8fc 	bl	8000598 <ds1307_init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d003      	beq.n	80003ae <main+0x2a>
	{
		printf("RTC init has failed \n");
 80003a6:	482c      	ldr	r0, [pc, #176]	; (8000458 <main+0xd4>)
 80003a8:	f001 facc 	bl	8001944 <puts>
		while(1);
 80003ac:	e7fe      	b.n	80003ac <main+0x28>
	}
	init_systick_timer(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f7ff ff22 	bl	80001f8 <init_systick_timer>

	current_date.date = 19;
 80003b4:	2313      	movs	r3, #19
 80003b6:	713b      	strb	r3, [r7, #4]
	current_date.day = TUSEDAY;
 80003b8:	2303      	movs	r3, #3
 80003ba:	71fb      	strb	r3, [r7, #7]
	current_date.month = 3;
 80003bc:	2303      	movs	r3, #3
 80003be:	717b      	strb	r3, [r7, #5]
	current_date.year = 22;
 80003c0:	2316      	movs	r3, #22
 80003c2:	71bb      	strb	r3, [r7, #6]

	current_time.minutes = 36;
 80003c4:	2324      	movs	r3, #36	; 0x24
 80003c6:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 80003c8:	231e      	movs	r3, #30
 80003ca:	723b      	strb	r3, [r7, #8]
	current_time.hours = 6;
 80003cc:	2306      	movs	r3, #6
 80003ce:	72bb      	strb	r3, [r7, #10]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80003d0:	2301      	movs	r3, #1
 80003d2:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_time(&current_time);
 80003d4:	f107 0308 	add.w	r3, r7, #8
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 f8fb 	bl	80005d4 <ds1307_set_current_time>
	ds1307_set_current_date(&current_date);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f940 	bl	8000666 <ds1307_set_current_date>

	ds1307_get_current_time(&current_time);
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f96b 	bl	80006c6 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f9b0 	bl	8000758 <ds1307_get_current_date>

	char *am_pm;

	if(current_time.time_format != TIME_FORMAT_24HRS)
 80003f8:	7afb      	ldrb	r3, [r7, #11]
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d013      	beq.n	8000426 <main+0xa2>
	{
		am_pm = (current_time.time_format)? "PM":"AM";
 80003fe:	7afb      	ldrb	r3, [r7, #11]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <main+0x84>
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <main+0xd8>)
 8000406:	e000      	b.n	800040a <main+0x86>
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <main+0xdc>)
 800040a:	60fb      	str	r3, [r7, #12]
		//printf("Current time = %s %s \n",time_to_string(&current_time),am_pm);
		lcd_send_string(time_to_string(&current_time));
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff63 	bl	80002dc <time_to_string>
 8000416:	4603      	mov	r3, r0
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fae7 	bl	80009ec <lcd_send_string>
		lcd_send_string(am_pm);
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f000 fae4 	bl	80009ec <lcd_send_string>
 8000424:	e008      	b.n	8000438 <main+0xb4>
	}else
	{
		//printf("Current time = %s \n",time_to_string(&current_time));
		lcd_send_string(time_to_string(&current_time));
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff56 	bl	80002dc <time_to_string>
 8000430:	4603      	mov	r3, r0
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fada 	bl	80009ec <lcd_send_string>
	}

	//printf("Current date = %s <%s>\n",date_to_string(&current_date),get_day_of_week(current_date.day));
	lcd_set_cursor(2, 1);
 8000438:	2101      	movs	r1, #1
 800043a:	2002      	movs	r0, #2
 800043c:	f000 fbac 	bl	8000b98 <lcd_set_cursor>
	lcd_send_string(date_to_string(&current_date));
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff74 	bl	8000330 <date_to_string>
 8000448:	4603      	mov	r3, r0
 800044a:	4618      	mov	r0, r3
 800044c:	f000 face 	bl	80009ec <lcd_send_string>

	while(1);
 8000450:	e7fe      	b.n	8000450 <main+0xcc>
 8000452:	bf00      	nop
 8000454:	08002724 	.word	0x08002724
 8000458:	0800272c 	.word	0x0800272c
 800045c:	08002744 	.word	0x08002744
 8000460:	08002748 	.word	0x08002748

08000464 <SysTick_Handler>:

	return 0;
}

void SysTick_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f929 	bl	80006c6 <ds1307_get_current_time>
	lcd_set_cursor(1, 1);
 8000474:	2101      	movs	r1, #1
 8000476:	2001      	movs	r0, #1
 8000478:	f000 fb8e 	bl	8000b98 <lcd_set_cursor>
	char *am_pm;

		if(current_time.time_format != TIME_FORMAT_24HRS)
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d013      	beq.n	80004aa <SysTick_Handler+0x46>
		{
			am_pm = (current_time.time_format)? "PM":"AM";
 8000482:	7afb      	ldrb	r3, [r7, #11]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SysTick_Handler+0x28>
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <SysTick_Handler+0x80>)
 800048a:	e000      	b.n	800048e <SysTick_Handler+0x2a>
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <SysTick_Handler+0x84>)
 800048e:	60fb      	str	r3, [r7, #12]
			//printf("Current time = %s %s \n",time_to_string(&current_time),am_pm);
			lcd_send_string(time_to_string(&current_time));
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff21 	bl	80002dc <time_to_string>
 800049a:	4603      	mov	r3, r0
 800049c:	4618      	mov	r0, r3
 800049e:	f000 faa5 	bl	80009ec <lcd_send_string>
			lcd_send_string(am_pm);
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f000 faa2 	bl	80009ec <lcd_send_string>
 80004a8:	e008      	b.n	80004bc <SysTick_Handler+0x58>
		}else
		{
			//printf("Current time = %s \n",time_to_string(&current_time));
			lcd_send_string(time_to_string(&current_time));
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff14 	bl	80002dc <time_to_string>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 fa98 	bl	80009ec <lcd_send_string>
		}
		ds1307_get_current_date(&current_date);
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f94a 	bl	8000758 <ds1307_get_current_date>
		//printf("Current date = %s <%s>\n",date_to_string(&current_date),get_day_of_week(current_date.day));
		lcd_set_cursor(2, 1);
 80004c4:	2101      	movs	r1, #1
 80004c6:	2002      	movs	r0, #2
 80004c8:	f000 fb66 	bl	8000b98 <lcd_set_cursor>
		lcd_send_string(date_to_string(&current_date));
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff2e 	bl	8000330 <date_to_string>
 80004d4:	4603      	mov	r3, r0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fa88 	bl	80009ec <lcd_send_string>
}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	08002744 	.word	0x08002744
 80004e8:	08002748 	.word	0x08002748

080004ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <_sbrk+0x50>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d102      	bne.n	8000502 <_sbrk+0x16>
		heap_end = &end;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <_sbrk+0x50>)
 80004fe:	4a10      	ldr	r2, [pc, #64]	; (8000540 <_sbrk+0x54>)
 8000500:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <_sbrk+0x50>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <_sbrk+0x50>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	466a      	mov	r2, sp
 8000512:	4293      	cmp	r3, r2
 8000514:	d907      	bls.n	8000526 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000516:	f001 f987 	bl	8001828 <__errno>
 800051a:	4602      	mov	r2, r0
 800051c:	230c      	movs	r3, #12
 800051e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	e006      	b.n	8000534 <_sbrk+0x48>
	}

	heap_end += incr;
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <_sbrk+0x50>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	4a03      	ldr	r2, [pc, #12]	; (800053c <_sbrk+0x50>)
 8000530:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000532:	68fb      	ldr	r3, [r7, #12]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000b4 	.word	0x200000b4
 8000540:	20000198 	.word	0x20000198

08000544 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000546:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054a:	490e      	ldr	r1, [pc, #56]	; (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 800054c:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <LoopForever+0xe>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1



  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000560:	4c0b      	ldr	r4, [pc, #44]	; (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800056e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000572:	f001 f95f 	bl	8001834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000576:	f7ff ff05 	bl	8000384 <main>

0800057a <LoopForever>:

LoopForever:
    b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   r0, =_estack
 800057c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000588:	080027d4 	.word	0x080027d4
  ldr r2, =_sbss
 800058c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000590:	20000198 	.word	0x20000198

08000594 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC_IRQHandler>
	...

08000598 <ds1307_init>:
static uint8_t bcd_to_binary(uint8_t value);

I2C_Handle_t g_ds1307I2cHandle;

uint8_t ds1307_init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	// 1. init i2c pins
	ds1307_i2c_pin_config();
 800059e:	f000 f90f 	bl	80007c0 <ds1307_i2c_pin_config>
	// 2. init i2c peripheral
	ds1307_i2c_config();
 80005a2:	f000 f949 	bl	8000838 <ds1307_i2c_config>

	// 3. ENABLE the i2c peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80005a6:	2101      	movs	r1, #1
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <ds1307_init+0x38>)
 80005aa:	f000 fe00 	bl	80011ae <I2C_PeripheralControl>

	// 4. make clock halt = 0
	ds1307_write(0x00,DS1307_ADDR_SEC);
 80005ae:	2100      	movs	r1, #0
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f957 	bl	8000864 <ds1307_write>

	//5.read back clock halt bit
	uint8_t clk_state = ds1307_read(DS1307_ADDR_SEC);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f970 	bl	800089c <ds1307_read>
 80005bc:	4603      	mov	r3, r0
 80005be:	71fb      	strb	r3, [r7, #7]

	return ((clk_state >> 7) & 0x01);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	09db      	lsrs	r3, r3, #7
 80005c4:	b2db      	uxtb	r3, r3

}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400

080005d4 <ds1307_set_current_time>:
void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f979 	bl	80008d8 <binary_to_bcd>
 80005e6:	4603      	mov	r3, r0
 80005e8:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f0:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f934 	bl	8000864 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	785b      	ldrb	r3, [r3, #1]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f969 	bl	80008d8 <binary_to_bcd>
 8000606:	4603      	mov	r3, r0
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f92a 	bl	8000864 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f95f 	bl	80008d8 <binary_to_bcd>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d104      	bne.n	8000630 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e011      	b.n	8000654 <ds1307_set_current_time+0x80>
	}else
	{
		hrs |= (1 << 6);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000636:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM)? hrs | (1<<5): hrs & ~(1<<5);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d104      	bne.n	800064a <ds1307_set_current_time+0x76>
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	b2db      	uxtb	r3, r3
 8000648:	e003      	b.n	8000652 <ds1307_set_current_time+0x7e>
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	f023 0320 	bic.w	r3, r3, #32
 8000650:	b2db      	uxtb	r3, r3
 8000652:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs, DS1307_ADDR_HRS);
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f903 	bl	8000864 <ds1307_write>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f930 	bl	80008d8 <binary_to_bcd>
 8000678:	4603      	mov	r3, r0
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f8f1 	bl	8000864 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f926 	bl	80008d8 <binary_to_bcd>
 800068c:	4603      	mov	r3, r0
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f8e7 	bl	8000864 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	789b      	ldrb	r3, [r3, #2]
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f91c 	bl	80008d8 <binary_to_bcd>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2106      	movs	r1, #6
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8dd 	bl	8000864 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f912 	bl	80008d8 <binary_to_bcd>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2103      	movs	r1, #3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f8d3 	bl	8000864 <ds1307_write>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f8e4 	bl	800089c <ds1307_read>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 80006d8:	7bbb      	ldrb	r3, [r7, #14]
 80006da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006de:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 80006e0:	7bbb      	ldrb	r3, [r7, #14]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f922 	bl	800092c <bcd_to_binary>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f8d3 	bl	800089c <ds1307_read>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f917 	bl	800092c <bcd_to_binary>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	705a      	strb	r2, [r3, #1]
	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000706:	2002      	movs	r0, #2
 8000708:	f000 f8c8 	bl	800089c <ds1307_read>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1<<6))
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00f      	beq.n	800073a <ds1307_get_current_time+0x74>
	{
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	f003 0320 	and.w	r3, r3, #32
 8000720:	2b00      	cmp	r3, #0
 8000722:	bf14      	ite	ne
 8000724:	2301      	movne	r3, #1
 8000726:	2300      	moveq	r3, #0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x03 << 5);
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e002      	b.n	8000740 <ds1307_get_current_time+0x7a>
	}else
	{
		rtc_time->time_format = TIME_FORMAT_24HRS;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2202      	movs	r2, #2
 800073e:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hrs);
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f8f2 	bl	800092c <bcd_to_binary>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	709a      	strb	r2, [r3, #2]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f89b 	bl	800089c <ds1307_read>
 8000766:	4603      	mov	r3, r0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f8df 	bl	800092c <bcd_to_binary>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000776:	2004      	movs	r0, #4
 8000778:	f000 f890 	bl	800089c <ds1307_read>
 800077c:	4603      	mov	r3, r0
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f8d4 	bl	800092c <bcd_to_binary>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 800078c:	2005      	movs	r0, #5
 800078e:	f000 f885 	bl	800089c <ds1307_read>
 8000792:	4603      	mov	r3, r0
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f8c9 	bl	800092c <bcd_to_binary>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80007a2:	2006      	movs	r0, #6
 80007a4:	f000 f87a 	bl	800089c <ds1307_read>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f8be 	bl	800092c <bcd_to_binary>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	709a      	strb	r2, [r3, #2]
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ds1307_i2c_pin_config>:


static void ds1307_i2c_pin_config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;
	memset (&i2c_sda,0,sizeof(i2c_sda));
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	220c      	movs	r2, #12
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 f854 	bl	800187c <memset>
	memset (&i2c_sda,0,sizeof(i2c_sda));
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	220c      	movs	r2, #12
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f84d 	bl	800187c <memset>

	i2c_sda.pGPIOx = DS1307_I2C_PORT;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <ds1307_i2c_pin_config+0x74>)
 80007e4:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80007ea:	2302      	movs	r3, #2
 80007ec:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80007ee:	2307      	movs	r3, #7
 80007f0:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80007f2:	2301      	movs	r3, #1
 80007f4:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPupdControl = DS1307_I2C_PUPD;
 80007f6:	2301      	movs	r3, #1
 80007f8:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80007fa:	2302      	movs	r3, #2
 80007fc:	74bb      	strb	r3, [r7, #18]

	GPIO_Inti(&i2c_sda);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fdf4 	bl	80013f0 <GPIO_Inti>

	i2c_scl.pGPIOx = DS1307_I2C_PORT;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <ds1307_i2c_pin_config+0x74>)
 800080a:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000810:	2302      	movs	r3, #2
 8000812:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000814:	2306      	movs	r3, #6
 8000816:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000818:	2301      	movs	r3, #1
 800081a:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPupdControl = DS1307_I2C_PUPD;
 800081c:	2301      	movs	r3, #1
 800081e:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000820:	2302      	movs	r3, #2
 8000822:	71bb      	strb	r3, [r7, #6]

	GPIO_Inti(&i2c_scl);
 8000824:	463b      	mov	r3, r7
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fde2 	bl	80013f0 <GPIO_Inti>

}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020400 	.word	0x40020400

08000838 <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <ds1307_i2c_config+0x20>)
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <ds1307_i2c_config+0x24>)
 8000840:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <ds1307_i2c_config+0x20>)
 8000844:	2201      	movs	r2, #1
 8000846:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <ds1307_i2c_config+0x20>)
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <ds1307_i2c_config+0x28>)
 800084c:	605a      	str	r2, [r3, #4]
	I2C_Inti(&g_ds1307I2cHandle);
 800084e:	4802      	ldr	r0, [pc, #8]	; (8000858 <ds1307_i2c_config+0x20>)
 8000850:	f000 faf2 	bl	8000e38 <I2C_Inti>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000016c 	.word	0x2000016c
 800085c:	40005400 	.word	0x40005400
 8000860:	000186a0 	.word	0x000186a0

08000864 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_address)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_address;
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	2300      	movs	r3, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2368      	movs	r3, #104	; 0x68
 8000886:	2202      	movs	r2, #2
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <ds1307_write+0x34>)
 800088a:	f000 fb85 	bl	8000f98 <I2C_MasterSendData>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000016c 	.word	0x2000016c

0800089c <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_address)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2cHandle, &reg_address, 1, DS1307_I2C_ADDRESS, 0);
 80008a6:	1df9      	adds	r1, r7, #7
 80008a8:	2300      	movs	r3, #0
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2368      	movs	r3, #104	; 0x68
 80008ae:	2201      	movs	r2, #1
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <ds1307_read+0x38>)
 80008b2:	f000 fb71 	bl	8000f98 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 80008b6:	f107 010f 	add.w	r1, r7, #15
 80008ba:	2300      	movs	r3, #0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2368      	movs	r3, #104	; 0x68
 80008c0:	2201      	movs	r2, #1
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <ds1307_read+0x38>)
 80008c4:	f000 fbcb 	bl	800105e <I2C_MasterReceiveData>
	return data;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000016c 	.word	0x2000016c

080008d8 <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t bcd;
	bcd = value;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b09      	cmp	r3, #9
 80008ea:	d916      	bls.n	800091a <binary_to_bcd+0x42>
	{
		m = value /10;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <binary_to_bcd+0x50>)
 80008f0:	fba2 2303 	umull	r2, r3, r2, r3
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	73bb      	strb	r3, [r7, #14]
		n = value %10;
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <binary_to_bcd+0x50>)
 80008fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000900:	08d9      	lsrs	r1, r3, #3
 8000902:	460b      	mov	r3, r1
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	737b      	strb	r3, [r7, #13]
		bcd = ((uint8_t)(m << 4) | n);
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	b2da      	uxtb	r2, r3
 8000914:	7b7b      	ldrb	r3, [r7, #13]
 8000916:	4313      	orrs	r3, r2
 8000918:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	cccccccd 	.word	0xcccccccd

0800092c <bcd_to_binary>:
static uint8_t bcd_to_binary(uint8_t value)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t bin;

	m = (uint8_t)((value >> 4)* 10);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	4413      	add	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	73bb      	strb	r3, [r7, #14]
	bin = m + n;
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	4413      	add	r3, r2
 8000954:	737b      	strb	r3, [r7, #13]
	return bin;
 8000956:	7b7b      	ldrb	r3, [r7, #13]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <lcd_send_command>:
static void write_4_bit(uint8_t value);
static void mdelay(uint32_t delay);
static void udelay(uint32_t delay);

void lcd_send_command(uint8_t cmd)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_PORT, LCD_RS, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	480c      	ldr	r0, [pc, #48]	; (80009a4 <lcd_send_command+0x40>)
 8000974:	f000 fed2 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_RW, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <lcd_send_command+0x40>)
 800097e:	f000 fecd 	bl	800171c <GPIO_WriteToOutputPin>

	write_4_bit(cmd >> 4);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f8cd 	bl	8000b28 <write_4_bit>
	write_4_bit(cmd & 0x0F);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 030f 	and.w	r3, r3, #15
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8c6 	bl	8000b28 <write_4_bit>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <lcd_send_char>:
void lcd_send_char(uint8_t data)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_PORT, LCD_RS, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2100      	movs	r1, #0
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <lcd_send_char+0x40>)
 80009b8:	f000 feb0 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_RW, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <lcd_send_char+0x40>)
 80009c2:	f000 feab 	bl	800171c <GPIO_WriteToOutputPin>

	write_4_bit(data >> 4);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f8ab 	bl	8000b28 <write_4_bit>
	write_4_bit(data & 0x0F);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f8a4 	bl	8000b28 <write_4_bit>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40020c00 	.word	0x40020c00

080009ec <lcd_send_string>:

void lcd_send_string(char *message)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_char((uint8_t)*message++);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ffd3 	bl	80009a8 <lcd_send_char>
	}while(*message != '\0');
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f4      	bne.n	80009f4 <lcd_send_string+0x8>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <Lcd_Init>:

void Lcd_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	GPIO_Handle_t lcd_signal;
	lcd_signal.pGPIOx = GPIOD;
 8000a1a:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <Lcd_Init+0x110>)
 8000a1c:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_RS;
 8000a22:	2300      	movs	r3, #0
 8000a24:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a26:	2300      	movs	r3, #0
 8000a28:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_NO_PUPD;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	72bb      	strb	r3, [r7, #10]

	GPIO_Inti(&lcd_signal);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fcdb 	bl	80013f0 <GPIO_Inti>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_RW;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	723b      	strb	r3, [r7, #8]
	GPIO_Inti(&lcd_signal);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fcd5 	bl	80013f0 <GPIO_Inti>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_EN;
 8000a46:	2302      	movs	r3, #2
 8000a48:	723b      	strb	r3, [r7, #8]
	GPIO_Inti(&lcd_signal);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fccf 	bl	80013f0 <GPIO_Inti>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_D4;
 8000a52:	2303      	movs	r3, #3
 8000a54:	723b      	strb	r3, [r7, #8]
	GPIO_Inti(&lcd_signal);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fcc9 	bl	80013f0 <GPIO_Inti>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_D5;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	723b      	strb	r3, [r7, #8]
	GPIO_Inti(&lcd_signal);
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fcc3 	bl	80013f0 <GPIO_Inti>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_D6;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	723b      	strb	r3, [r7, #8]
	GPIO_Inti(&lcd_signal);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fcbd 	bl	80013f0 <GPIO_Inti>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_D7;
 8000a76:	2306      	movs	r3, #6
 8000a78:	723b      	strb	r3, [r7, #8]
	GPIO_Inti(&lcd_signal);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fcb7 	bl	80013f0 <GPIO_Inti>

	GPIO_WriteToOutputPin(LCD_PORT, LCD_RS, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	4827      	ldr	r0, [pc, #156]	; (8000b24 <Lcd_Init+0x110>)
 8000a88:	f000 fe48 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_RW, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4824      	ldr	r0, [pc, #144]	; (8000b24 <Lcd_Init+0x110>)
 8000a92:	f000 fe43 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_EN, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2102      	movs	r1, #2
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <Lcd_Init+0x110>)
 8000a9c:	f000 fe3e 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D4, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	481f      	ldr	r0, [pc, #124]	; (8000b24 <Lcd_Init+0x110>)
 8000aa6:	f000 fe39 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D5, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2104      	movs	r1, #4
 8000aae:	481d      	ldr	r0, [pc, #116]	; (8000b24 <Lcd_Init+0x110>)
 8000ab0:	f000 fe34 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D6, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	481a      	ldr	r0, [pc, #104]	; (8000b24 <Lcd_Init+0x110>)
 8000aba:	f000 fe2f 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D7, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2106      	movs	r1, #6
 8000ac2:	4818      	ldr	r0, [pc, #96]	; (8000b24 <Lcd_Init+0x110>)
 8000ac4:	f000 fe2a 	bl	800171c <GPIO_WriteToOutputPin>
	//2. DO the INitialization
	mdelay(40);
 8000ac8:	2028      	movs	r0, #40	; 0x28
 8000aca:	f000 f8ad 	bl	8000c28 <mdelay>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_RS, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4814      	ldr	r0, [pc, #80]	; (8000b24 <Lcd_Init+0x110>)
 8000ad4:	f000 fe22 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_RW, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <Lcd_Init+0x110>)
 8000ade:	f000 fe1d 	bl	800171c <GPIO_WriteToOutputPin>

	write_4_bit(0x3);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f820 	bl	8000b28 <write_4_bit>

	mdelay(5);
 8000ae8:	2005      	movs	r0, #5
 8000aea:	f000 f89d 	bl	8000c28 <mdelay>

	write_4_bit(0x3);
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f81a 	bl	8000b28 <write_4_bit>

	udelay(150);
 8000af4:	2096      	movs	r0, #150	; 0x96
 8000af6:	f000 f8af 	bl	8000c58 <udelay>

	write_4_bit(0x3);
 8000afa:	2003      	movs	r0, #3
 8000afc:	f000 f814 	bl	8000b28 <write_4_bit>
	write_4_bit(0x2);
 8000b00:	2002      	movs	r0, #2
 8000b02:	f000 f811 	bl	8000b28 <write_4_bit>

	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000b06:	2028      	movs	r0, #40	; 0x28
 8000b08:	f7ff ff2c 	bl	8000964 <lcd_send_command>
	lcd_send_command(LCD_CMD_DON_CURON);
 8000b0c:	200e      	movs	r0, #14
 8000b0e:	f7ff ff29 	bl	8000964 <lcd_send_command>
	lcd_display_clear();
 8000b12:	f000 f868 	bl	8000be6 <lcd_display_clear>
	lcd_send_command(LCD_CMD_INCADD);
 8000b16:	2006      	movs	r0, #6
 8000b18:	f7ff ff24 	bl	8000964 <lcd_send_command>
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <write_4_bit>:

static void write_4_bit(uint8_t value)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D4, ((value>>0) & 0x01));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4815      	ldr	r0, [pc, #84]	; (8000b94 <write_4_bit+0x6c>)
 8000b40:	f000 fdec 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D5, ((value>>1) & 0x01));
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	085b      	lsrs	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	2104      	movs	r1, #4
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <write_4_bit+0x6c>)
 8000b56:	f000 fde1 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D6, ((value>>2) & 0x01));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	2105      	movs	r1, #5
 8000b6a:	480a      	ldr	r0, [pc, #40]	; (8000b94 <write_4_bit+0x6c>)
 8000b6c:	f000 fdd6 	bl	800171c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_D7, ((value>>3) & 0x01));
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2106      	movs	r1, #6
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <write_4_bit+0x6c>)
 8000b82:	f000 fdcb 	bl	800171c <GPIO_WriteToOutputPin>

	lcd_enable();
 8000b86:	f000 f839 	bl	8000bfc <lcd_enable>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
	column--;
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d002      	beq.n	8000bba <lcd_set_cursor+0x22>
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d009      	beq.n	8000bcc <lcd_set_cursor+0x34>
		break;
	case 2:
		lcd_send_command((column |= 0xc0));
		break;
	default:
		break;
 8000bb8:	e011      	b.n	8000bde <lcd_set_cursor+0x46>
		lcd_send_command((column|= 0x80));
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc0:	71bb      	strb	r3, [r7, #6]
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fecd 	bl	8000964 <lcd_send_command>
		break;
 8000bca:	e008      	b.n	8000bde <lcd_set_cursor+0x46>
		lcd_send_command((column |= 0xc0));
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000bd2:	71bb      	strb	r3, [r7, #6]
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fec4 	bl	8000964 <lcd_send_command>
		break;
 8000bdc:	bf00      	nop
	}
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff feba 	bl	8000964 <lcd_send_command>
	mdelay(2);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f000 f819 	bl	8000c28 <mdelay>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <lcd_enable>:
{
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
	mdelay(2);
}
static void lcd_enable(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_PORT, LCD_EN, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2102      	movs	r1, #2
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <lcd_enable+0x28>)
 8000c06:	f000 fd89 	bl	800171c <GPIO_WriteToOutputPin>
	udelay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f000 f824 	bl	8000c58 <udelay>
	GPIO_WriteToOutputPin(LCD_PORT, LCD_EN, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2102      	movs	r1, #2
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <lcd_enable+0x28>)
 8000c16:	f000 fd81 	bl	800171c <GPIO_WriteToOutputPin>
	udelay(100);
 8000c1a:	2064      	movs	r0, #100	; 0x64
 8000c1c:	f000 f81c 	bl	8000c58 <udelay>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <mdelay>:
static void mdelay(uint32_t delay)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	for(uint32_t i =0;i<(delay*1000);i++);
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e002      	b.n	8000c3c <mdelay+0x14>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3f4      	bcc.n	8000c36 <mdelay+0xe>
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <udelay>:
static void udelay(uint32_t delay)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	for(uint32_t i =0;i<(delay*1);i++);
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e002      	b.n	8000c6c <udelay+0x14>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3f8      	bcc.n	8000c66 <udelay+0xe>
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <I2C_ExecuteAddressPhaseSend>:

static void I2C_ExecuteAddressPhaseSend(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	611a      	str	r2, [r3, #16]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	uint8_t dummy_read;
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d01f      	beq.n	8000d22 <I2C_ClearADDRFlag+0x56>
	{
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7f1b      	ldrb	r3, [r3, #28]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d112      	bne.n	8000d10 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d11f      	bne.n	8000d32 <I2C_ClearADDRFlag+0x66>
			{
				I2C_MangeAck(pI2CHandle->pI2Cx,DISABLE);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fa74 	bl	80011e6 <I2C_MangeAck>
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	73fb      	strb	r3, [r7, #15]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	73fb      	strb	r3, [r7, #15]
	{
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000d0e:	e010      	b.n	8000d32 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	73fb      	strb	r3, [r7, #15]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	73fb      	strb	r3, [r7, #15]
}
 8000d20:	e007      	b.n	8000d32 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	73fb      	strb	r3, [r7, #15]
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <I2C_ExecuteAddressPhaseReceive>:

static void I2C_ExecuteAddressPhaseReceive(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |=(1);
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	611a      	str	r2, [r3, #16]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <I2C_PerClockControl>:

void I2C_PerClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d120      	bne.n	8000ddc <I2C_PerClockControl+0x54>
	{
	if(pI2Cx == I2C1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <I2C_PerClockControl+0xa0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d106      	bne.n	8000db0 <I2C_PerClockControl+0x28>
	{
		I2C1_PCLK_EN();
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
	else if(pI2Cx == I2C3)
	{
	      I2C3_PCLK_DI();
	}
	}
}
 8000dae:	e035      	b.n	8000e1c <I2C_PerClockControl+0x94>
	else if(pI2Cx == I2C2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <I2C_PerClockControl+0xa8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d106      	bne.n	8000dc6 <I2C_PerClockControl+0x3e>
		I2C2_PCLK_EN();
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000dbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dc4:	e02a      	b.n	8000e1c <I2C_PerClockControl+0x94>
	else if(pI2Cx == I2C3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <I2C_PerClockControl+0xac>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d126      	bne.n	8000e1c <I2C_PerClockControl+0x94>
		I2C3_PCLK_EN();
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dda:	e01f      	b.n	8000e1c <I2C_PerClockControl+0x94>
    if(pI2Cx == I2C1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <I2C_PerClockControl+0xa0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d106      	bne.n	8000df2 <I2C_PerClockControl+0x6a>
	      I2C1_PCLK_DI();
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000dea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000df0:	e014      	b.n	8000e1c <I2C_PerClockControl+0x94>
	else if(pI2Cx == I2C2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <I2C_PerClockControl+0xa8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d106      	bne.n	8000e08 <I2C_PerClockControl+0x80>
	      I2C2_PCLK_DI();
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000e00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e06:	e009      	b.n	8000e1c <I2C_PerClockControl+0x94>
	else if(pI2Cx == I2C3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <I2C_PerClockControl+0xac>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d105      	bne.n	8000e1c <I2C_PerClockControl+0x94>
	      I2C3_PCLK_DI();
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <I2C_PerClockControl+0xa4>)
 8000e16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40005800 	.word	0x40005800
 8000e34:	40005c00 	.word	0x40005c00

08000e38 <I2C_Inti>:
 * this for intialization
 */


void I2C_Inti(I2C_Handle_t *pI2CHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	uint32_t  tempreg =0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]

	I2C_PerClockControl(pI2CHandle->pI2Cx , ENABLE);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff9c 	bl	8000d88 <I2C_PerClockControl>

	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7a5b      	ldrb	r3, [r3, #9]
 8000e54:	029b      	lsls	r3, r3, #10
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	601a      	str	r2, [r3, #0]

	//configure the FRQ field
	tempreg = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000e6a:	f000 fc7d 	bl	8001768 <RCC_GetPCLK1Value>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <I2C_Inti+0x158>)
 8000e72:	fba3 2302 	umull	r2, r3, r3, r2
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e88:	605a      	str	r2, [r3, #4]

	// configure the device own address
	tempreg =0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a1b      	ldrb	r3, [r3, #8]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	609a      	str	r2, [r3, #8]

	//CCR calculation
	uint16_t ccr_value = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a36      	ldr	r2, [pc, #216]	; (8000f94 <I2C_Inti+0x15c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d80f      	bhi.n	8000ede <I2C_Inti+0xa6>
	{
		ccr_value = (RCC_GetPCLK1Value() / (2*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000ebe:	f000 fc53 	bl	8001768 <RCC_GetPCLK1Value>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000ed0:	897b      	ldrh	r3, [r7, #10]
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e02d      	b.n	8000f3a <I2C_Inti+0x102>
	}else
	{
		tempreg |= (1<<15);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle <<14);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	895b      	ldrh	r3, [r3, #10]
 8000eea:	039b      	lsls	r3, r3, #14
 8000eec:	461a      	mov	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	895b      	ldrh	r3, [r3, #10]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10b      	bne.n	8000f14 <I2C_Inti+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000efc:	f000 fc34 	bl	8001768 <RCC_GetPCLK1Value>
 8000f00:	4601      	mov	r1, r0
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f10:	817b      	strh	r3, [r7, #10]
 8000f12:	e00c      	b.n	8000f2e <I2C_Inti+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000f14:	f000 fc28 	bl	8001768 <RCC_GetPCLK1Value>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009a      	lsls	r2, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	61da      	str	r2, [r3, #28]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <I2C_Inti+0x15c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d809      	bhi.n	8000f60 <I2C_Inti+0x128>
	{
		tempreg = (RCC_GetPCLK1Value()/1000000U) + 1;
 8000f4c:	f000 fc0c 	bl	8001768 <RCC_GetPCLK1Value>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <I2C_Inti+0x158>)
 8000f54:	fba3 2302 	umull	r2, r3, r3, r2
 8000f58:	0c9b      	lsrs	r3, r3, #18
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e00c      	b.n	8000f7a <I2C_Inti+0x142>
	}else
	{
		tempreg = ((RCC_GetPCLK1Value()* 300) / 1000000U)+1;
 8000f60:	f000 fc02 	bl	8001768 <RCC_GetPCLK1Value>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f6a:	fb03 f302 	mul.w	r3, r3, r2
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <I2C_Inti+0x158>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0c9b      	lsrs	r3, r3, #18
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f84:	621a      	str	r2, [r3, #32]
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	000186a0 	.word	0x000186a0

08000f98 <I2C_MasterSendData>:
{

}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer,uint32_t len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	70fb      	strb	r3, [r7, #3]
	// 1. generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fe68 	bl	8000c80 <I2C_GenerateStartCondition>

	// 2. confirm that start condition is completed by checking the SB flag in the SR1
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx , I2C_FLAG_SB) );
 8000fb0:	bf00      	nop
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f8e4 	bl	8001186 <I2C_GetFlagStatus>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f6      	beq.n	8000fb2 <I2C_MasterSendData+0x1a>

	// 3. send the slave address and the operation
	I2C_ExecuteAddressPhaseSend(pI2CHandle->pI2Cx,SlaveAddr);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	78fa      	ldrb	r2, [r7, #3]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe67 	bl	8000ca0 <I2C_ExecuteAddressPhaseSend>

	// 4. confirm that address phase is completed by checking the ADDR Flag
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx , I2C_FLAG_ADDR) );
 8000fd2:	bf00      	nop
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f8d3 	bl	8001186 <I2C_GetFlagStatus>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f6      	beq.n	8000fd4 <I2C_MasterSendData+0x3c>

	// 5. clear the ADDR flag according to its software sequence
	I2C_ClearADDRFlag(pI2CHandle);
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fe70 	bl	8000ccc <I2C_ClearADDRFlag>

	//.6 send data
	while(len > 0)
 8000fec:	e014      	b.n	8001018 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000fee:	bf00      	nop
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f8c5 	bl	8001186 <I2C_GetFlagStatus>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f6      	beq.n	8000ff0 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	3301      	adds	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
		len--;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3b01      	subs	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
	while(len > 0)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1e7      	bne.n	8000fee <I2C_MasterSendData+0x56>
	}
	// 7. when len is zero wait for TXE = 1 and BTF = 1 before generate stop cond
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 800101e:	bf00      	nop
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f8ad 	bl	8001186 <I2C_GetFlagStatus>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f6      	beq.n	8001020 <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8001032:	bf00      	nop
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2104      	movs	r1, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f8a3 	bl	8001186 <I2C_GetFlagStatus>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f6      	beq.n	8001034 <I2C_MasterSendData+0x9c>

	if(Sr == I2C_DIABLE_SR)
 8001046:	7e3b      	ldrb	r3, [r7, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <I2C_MasterSendData+0xbe>
	{
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe72 	bl	8000d3a <I2C_GenerateStopCondition>
	}

}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxbuffer,uint32_t len,uint8_t SlaveAddr, uint8_t Sr)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	70fb      	strb	r3, [r7, #3]
	// 1. generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe05 	bl	8000c80 <I2C_GenerateStartCondition>

	// 2. confirm that start condition is completed by checking the SB flag in the SR1
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx , I2C_FLAG_SB) );
 8001076:	bf00      	nop
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f881 	bl	8001186 <I2C_GetFlagStatus>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f6      	beq.n	8001078 <I2C_MasterReceiveData+0x1a>

	// 3. send the slave address and the operation
	I2C_ExecuteAddressPhaseReceive(pI2CHandle->pI2Cx,SlaveAddr);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	78fa      	ldrb	r2, [r7, #3]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fe61 	bl	8000d5a <I2C_ExecuteAddressPhaseReceive>

	// 4. confirm that address phase is completed by checking the ADDR Flag
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx , I2C_FLAG_ADDR) );
 8001098:	bf00      	nop
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2102      	movs	r1, #2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f870 	bl	8001186 <I2C_GetFlagStatus>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f6      	beq.n	800109a <I2C_MasterReceiveData+0x3c>

	if(len == 1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d123      	bne.n	80010fa <I2C_MasterReceiveData+0x9c>
	{
		pI2CHandle->pI2Cx->CR1 &= ~(1<<10);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010c0:	601a      	str	r2, [r3, #0]
		I2C_ClearADDRFlag(pI2CHandle);
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff fe02 	bl	8000ccc <I2C_ClearADDRFlag>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 80010c8:	bf00      	nop
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f858 	bl	8001186 <I2C_GetFlagStatus>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f6      	beq.n	80010ca <I2C_MasterReceiveData+0x6c>
		if(Sr == I2C_DIABLE_SR)
 80010dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <I2C_MasterReceiveData+0x90>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe26 	bl	8000d3a <I2C_GenerateStopCondition>
		}
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	701a      	strb	r2, [r3, #0]
	}

	//.6 Receive data
	if(len > 1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d932      	bls.n	8001166 <I2C_MasterReceiveData+0x108>
	{
		I2C_ClearADDRFlag(pI2CHandle);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff fde3 	bl	8000ccc <I2C_ClearADDRFlag>
	for(uint32_t i = len;i>0;i--)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e029      	b.n	8001160 <I2C_MasterReceiveData+0x102>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 800110c:	bf00      	nop
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f836 	bl	8001186 <I2C_GetFlagStatus>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f6      	beq.n	800110e <I2C_MasterReceiveData+0xb0>
		if(i == 2)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d110      	bne.n	8001148 <I2C_MasterReceiveData+0xea>
		{
			pI2CHandle->pI2Cx->CR1 &= ~(1<<10);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001134:	601a      	str	r2, [r3, #0]
			if(Sr == I2C_DIABLE_SR)
 8001136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <I2C_MasterReceiveData+0xea>
			{
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fdf9 	bl	8000d3a <I2C_GenerateStopCondition>
			}
		}
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	701a      	strb	r2, [r3, #0]
		pRxbuffer++;
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3301      	adds	r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = len;i>0;i--)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3b01      	subs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1d2      	bne.n	800110c <I2C_MasterReceiveData+0xae>
	}
	}
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	7a5b      	ldrb	r3, [r3, #9]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <I2C_MasterReceiveData+0x120>
	{
	pI2CHandle->pI2Cx->CR1 |= (1<<10);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800117c:	601a      	str	r2, [r3, #0]
	}
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <I2C_GetFlagStatus>:
	}
}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <I2C_GetFlagStatus+0x1a>
		{
			return FLAG_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <I2C_GetFlagStatus+0x1c>
		}
		return FLAG_RESET;
 80011a0:	2300      	movs	r3, #0

}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <I2C_PeripheralControl>:
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount );
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1<<I2C_CR1_PE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
		}else
		{
			pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
		}
}
 80011cc:	e005      	b.n	80011da <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 0201 	bic.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <I2C_MangeAck>:
{

}

void I2C_MangeAck(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <I2C_MangeAck+0x20>
		{
			pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	601a      	str	r2, [r3, #0]
		}else
		{
			pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
		}
}
 8001204:	e005      	b.n	8001212 <I2C_MangeAck+0x2c>
			pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <GPIO_PerClockControl>:


#include"stm32f407xx_gpio.h"

void GPIO_PerClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d162      	bne.n	80012f8 <GPIO_PerClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a64      	ldr	r2, [pc, #400]	; (80013c8 <GPIO_PerClockControl+0x1a8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d106      	bne.n	8001248 <GPIO_PerClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800123a:	4b64      	ldr	r3, [pc, #400]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a63      	ldr	r2, [pc, #396]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 8001246:	e0b9      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a61      	ldr	r2, [pc, #388]	; (80013d0 <GPIO_PerClockControl+0x1b0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d106      	bne.n	800125e <GPIO_PerClockControl+0x3e>
			GPIOB_PCLK_EN();
 8001250:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a5d      	ldr	r2, [pc, #372]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800125c:	e0ae      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a5c      	ldr	r2, [pc, #368]	; (80013d4 <GPIO_PerClockControl+0x1b4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d106      	bne.n	8001274 <GPIO_PerClockControl+0x54>
			GPIOC_PCLK_EN();
 8001266:	4b59      	ldr	r3, [pc, #356]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a58      	ldr	r2, [pc, #352]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001272:	e0a3      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <GPIO_PerClockControl+0x1b8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d106      	bne.n	800128a <GPIO_PerClockControl+0x6a>
			GPIOD_PCLK_EN();
 800127c:	4b53      	ldr	r3, [pc, #332]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a52      	ldr	r2, [pc, #328]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001288:	e098      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a53      	ldr	r2, [pc, #332]	; (80013dc <GPIO_PerClockControl+0x1bc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d106      	bne.n	80012a0 <GPIO_PerClockControl+0x80>
			GPIOE_PCLK_EN();
 8001292:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800129e:	e08d      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4f      	ldr	r2, [pc, #316]	; (80013e0 <GPIO_PerClockControl+0x1c0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d106      	bne.n	80012b6 <GPIO_PerClockControl+0x96>
			GPIOF_PCLK_EN();
 80012a8:	4b48      	ldr	r3, [pc, #288]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a47      	ldr	r2, [pc, #284]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012b4:	e082      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <GPIO_PerClockControl+0x1c4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d106      	bne.n	80012cc <GPIO_PerClockControl+0xac>
			GPIOG_PCLK_EN();
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a42      	ldr	r2, [pc, #264]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012ca:	e077      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <GPIO_PerClockControl+0x1c8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d106      	bne.n	80012e2 <GPIO_PerClockControl+0xc2>
			GPIOH_PCLK_EN();
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a3c      	ldr	r2, [pc, #240]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012e0:	e06c      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a41      	ldr	r2, [pc, #260]	; (80013ec <GPIO_PerClockControl+0x1cc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d168      	bne.n	80013bc <GPIO_PerClockControl+0x19c>
			GPIOI_PCLK_EN();
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a37      	ldr	r2, [pc, #220]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012f6:	e061      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <GPIO_PerClockControl+0x1a8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <GPIO_PerClockControl+0xee>
			GPIOA_PCLK_DI();
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a31      	ldr	r2, [pc, #196]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800130c:	e056      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <GPIO_PerClockControl+0x1b0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d106      	bne.n	8001324 <GPIO_PerClockControl+0x104>
			GPIOB_PCLK_DI();
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800131c:	f023 0302 	bic.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001322:	e04b      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <GPIO_PerClockControl+0x1b4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d106      	bne.n	800133a <GPIO_PerClockControl+0x11a>
		    GPIOC_PCLK_DI();
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a26      	ldr	r2, [pc, #152]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001332:	f023 0304 	bic.w	r3, r3, #4
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001338:	e040      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <GPIO_PerClockControl+0x1b8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d106      	bne.n	8001350 <GPIO_PerClockControl+0x130>
			GPIOD_PCLK_DI();
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001348:	f023 0308 	bic.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800134e:	e035      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a22      	ldr	r2, [pc, #136]	; (80013dc <GPIO_PerClockControl+0x1bc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d106      	bne.n	8001366 <GPIO_PerClockControl+0x146>
			GPIOE_PCLK_DI();
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800135e:	f023 0310 	bic.w	r3, r3, #16
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001364:	e02a      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <GPIO_PerClockControl+0x1c0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d106      	bne.n	800137c <GPIO_PerClockControl+0x15c>
			GPIOF_PCLK_DI();
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001374:	f023 0320 	bic.w	r3, r3, #32
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800137a:	e01f      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <GPIO_PerClockControl+0x1c4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d106      	bne.n	8001392 <GPIO_PerClockControl+0x172>
			GPIOG_PCLK_DI();
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a10      	ldr	r2, [pc, #64]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800138a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001390:	e014      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <GPIO_PerClockControl+0x1c8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d106      	bne.n	80013a8 <GPIO_PerClockControl+0x188>
			GPIOH_PCLK_DI();
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80013a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013a6:	e009      	b.n	80013bc <GPIO_PerClockControl+0x19c>
		    else if(pGPIOx == GPIOI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <GPIO_PerClockControl+0x1cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d105      	bne.n	80013bc <GPIO_PerClockControl+0x19c>
			GPIOI_PCLK_DI();
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <GPIO_PerClockControl+0x1ac>)
 80013b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021800 	.word	0x40021800
 80013e8:	40021c00 	.word	0x40021c00
 80013ec:	40022000 	.word	0x40022000

080013f0 <GPIO_Inti>:

/*
 * this for intialization
 */
void GPIO_Inti(GPIO_Handle_t *pGPIOHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

	    uint32_t temp =0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
	    GPIO_PerClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff0c 	bl	8001220 <GPIO_PerClockControl>
	// 1 . configure the mode of the GPIO pin
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	795b      	ldrb	r3, [r3, #5]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d822      	bhi.n	8001456 <GPIO_Inti+0x66>
        {
        	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	795b      	ldrb	r3, [r3, #5]
 8001414:	461a      	mov	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
        	pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	791b      	ldrb	r3, [r3, #4]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2103      	movs	r1, #3
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
        	pGPIOHandle->pGPIOx->MODER |= temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
        	temp = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e0c1      	b.n	80015da <GPIO_Inti+0x1ea>
        }else
        {
        	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	2b04      	cmp	r3, #4
 800145c:	d117      	bne.n	800148e <GPIO_Inti+0x9e>
        	{
                EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <GPIO_Inti+0x18c>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	7912      	ldrb	r2, [r2, #4]
 8001466:	4611      	mov	r1, r2
 8001468:	2201      	movs	r2, #1
 800146a:	408a      	lsls	r2, r1
 800146c:	4611      	mov	r1, r2
 800146e:	4a43      	ldr	r2, [pc, #268]	; (800157c <GPIO_Inti+0x18c>)
 8001470:	430b      	orrs	r3, r1
 8001472:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001474:	4b41      	ldr	r3, [pc, #260]	; (800157c <GPIO_Inti+0x18c>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	7912      	ldrb	r2, [r2, #4]
 800147c:	4611      	mov	r1, r2
 800147e:	2201      	movs	r2, #1
 8001480:	408a      	lsls	r2, r1
 8001482:	43d2      	mvns	r2, r2
 8001484:	4611      	mov	r1, r2
 8001486:	4a3d      	ldr	r2, [pc, #244]	; (800157c <GPIO_Inti+0x18c>)
 8001488:	400b      	ands	r3, r1
 800148a:	6093      	str	r3, [r2, #8]
 800148c:	e035      	b.n	80014fa <GPIO_Inti+0x10a>

        	}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	795b      	ldrb	r3, [r3, #5]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d117      	bne.n	80014c6 <GPIO_Inti+0xd6>
        	{
        		EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <GPIO_Inti+0x18c>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	7912      	ldrb	r2, [r2, #4]
 800149e:	4611      	mov	r1, r2
 80014a0:	2201      	movs	r2, #1
 80014a2:	408a      	lsls	r2, r1
 80014a4:	4611      	mov	r1, r2
 80014a6:	4a35      	ldr	r2, [pc, #212]	; (800157c <GPIO_Inti+0x18c>)
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6093      	str	r3, [r2, #8]
        		EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <GPIO_Inti+0x18c>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7912      	ldrb	r2, [r2, #4]
 80014b4:	4611      	mov	r1, r2
 80014b6:	2201      	movs	r2, #1
 80014b8:	408a      	lsls	r2, r1
 80014ba:	43d2      	mvns	r2, r2
 80014bc:	4611      	mov	r1, r2
 80014be:	4a2f      	ldr	r2, [pc, #188]	; (800157c <GPIO_Inti+0x18c>)
 80014c0:	400b      	ands	r3, r1
 80014c2:	60d3      	str	r3, [r2, #12]
 80014c4:	e019      	b.n	80014fa <GPIO_Inti+0x10a>

        	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d115      	bne.n	80014fa <GPIO_Inti+0x10a>
        	{
        		EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <GPIO_Inti+0x18c>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	7912      	ldrb	r2, [r2, #4]
 80014d6:	4611      	mov	r1, r2
 80014d8:	2201      	movs	r2, #1
 80014da:	408a      	lsls	r2, r1
 80014dc:	4611      	mov	r1, r2
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <GPIO_Inti+0x18c>)
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6093      	str	r3, [r2, #8]
        		EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <GPIO_Inti+0x18c>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	7912      	ldrb	r2, [r2, #4]
 80014ec:	4611      	mov	r1, r2
 80014ee:	2201      	movs	r2, #1
 80014f0:	408a      	lsls	r2, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <GPIO_Inti+0x18c>)
 80014f6:	430b      	orrs	r3, r1
 80014f8:	60d3      	str	r3, [r2, #12]
        	}

        	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	791b      	ldrb	r3, [r3, #4]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	74fb      	strb	r3, [r7, #19]
        	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	74bb      	strb	r3, [r7, #18]
        	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <GPIO_Inti+0x190>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d044      	beq.n	80015a0 <GPIO_Inti+0x1b0>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <GPIO_Inti+0x194>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d02b      	beq.n	8001578 <GPIO_Inti+0x188>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a18      	ldr	r2, [pc, #96]	; (8001588 <GPIO_Inti+0x198>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d024      	beq.n	8001574 <GPIO_Inti+0x184>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <GPIO_Inti+0x19c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d01d      	beq.n	8001570 <GPIO_Inti+0x180>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <GPIO_Inti+0x1a0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d016      	beq.n	800156c <GPIO_Inti+0x17c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <GPIO_Inti+0x1a4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00f      	beq.n	8001568 <GPIO_Inti+0x178>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <GPIO_Inti+0x1a8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d008      	beq.n	8001564 <GPIO_Inti+0x174>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <GPIO_Inti+0x1ac>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d101      	bne.n	8001560 <GPIO_Inti+0x170>
 800155c:	2307      	movs	r3, #7
 800155e:	e020      	b.n	80015a2 <GPIO_Inti+0x1b2>
 8001560:	2300      	movs	r3, #0
 8001562:	e01e      	b.n	80015a2 <GPIO_Inti+0x1b2>
 8001564:	2306      	movs	r3, #6
 8001566:	e01c      	b.n	80015a2 <GPIO_Inti+0x1b2>
 8001568:	2305      	movs	r3, #5
 800156a:	e01a      	b.n	80015a2 <GPIO_Inti+0x1b2>
 800156c:	2304      	movs	r3, #4
 800156e:	e018      	b.n	80015a2 <GPIO_Inti+0x1b2>
 8001570:	2303      	movs	r3, #3
 8001572:	e016      	b.n	80015a2 <GPIO_Inti+0x1b2>
 8001574:	2302      	movs	r3, #2
 8001576:	e014      	b.n	80015a2 <GPIO_Inti+0x1b2>
 8001578:	2301      	movs	r3, #1
 800157a:	e012      	b.n	80015a2 <GPIO_Inti+0x1b2>
 800157c:	40013c00 	.word	0x40013c00
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40021400 	.word	0x40021400
 8001598:	40021800 	.word	0x40021800
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	2300      	movs	r3, #0
 80015a2:	747b      	strb	r3, [r7, #17]
        	SYSCFG_PCLK_EN();
 80015a4:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <GPIO_Inti+0x320>)
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	4a59      	ldr	r2, [pc, #356]	; (8001710 <GPIO_Inti+0x320>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ae:	6453      	str	r3, [r2, #68]	; 0x44
            SYSCFG->EXTICR[temp1] = portcode <<(temp2*4);
 80015b0:	7c7a      	ldrb	r2, [r7, #17]
 80015b2:	7cbb      	ldrb	r3, [r7, #18]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	fa02 f103 	lsl.w	r1, r2, r3
 80015ba:	4a56      	ldr	r2, [pc, #344]	; (8001714 <GPIO_Inti+0x324>)
 80015bc:	7cfb      	ldrb	r3, [r7, #19]
 80015be:	3302      	adds	r3, #2
 80015c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80015c4:	4b54      	ldr	r3, [pc, #336]	; (8001718 <GPIO_Inti+0x328>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	7912      	ldrb	r2, [r2, #4]
 80015cc:	4611      	mov	r1, r2
 80015ce:	2201      	movs	r2, #1
 80015d0:	408a      	lsls	r2, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <GPIO_Inti+0x328>)
 80015d6:	430b      	orrs	r3, r1
 80015d8:	6013      	str	r3, [r2, #0]
        }
        //temp =0;
	// 2 . configure the speed
           temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	799b      	ldrb	r3, [r3, #6]
 80015de:	461a      	mov	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	791b      	ldrb	r3, [r3, #4]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
           pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	791b      	ldrb	r3, [r3, #4]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2103      	movs	r1, #3
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
           pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6899      	ldr	r1, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
           temp =0;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
	// 3 . configure the pupd setting
           temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPupdControl <<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	79db      	ldrb	r3, [r3, #7]
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
           pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	791b      	ldrb	r3, [r3, #4]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2103      	movs	r1, #3
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	400a      	ands	r2, r1
 800164c:	60da      	str	r2, [r3, #12]
           pGPIOHandle->pGPIOx->PUPDR |= temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68d9      	ldr	r1, [r3, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	430a      	orrs	r2, r1
 800165c:	60da      	str	r2, [r3, #12]

          // temp =0;
	// 4 . configure the Output type
           temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7a1b      	ldrb	r3, [r3, #8]
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	791b      	ldrb	r3, [r3, #4]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
           pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	4619      	mov	r1, r3
 800167a:	2301      	movs	r3, #1
 800167c:	408b      	lsls	r3, r1
 800167e:	43db      	mvns	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	400a      	ands	r2, r1
 8001688:	605a      	str	r2, [r3, #4]
           pGPIOHandle->pGPIOx->OTYPER |= temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
           //temp =0;
	// 5 . configure the alt functional
           if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	795b      	ldrb	r3, [r3, #5]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d131      	bne.n	8001706 <GPIO_Inti+0x316>
           {
        	   uint8_t temp1,temp2;
        	   temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	791b      	ldrb	r3, [r3, #4]
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	743b      	strb	r3, [r7, #16]
        	   temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	73fb      	strb	r3, [r7, #15]
        	   pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 *temp2));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	7c3a      	ldrb	r2, [r7, #16]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	7c3a      	ldrb	r2, [r7, #16]
 80016d4:	4001      	ands	r1, r0
 80016d6:	3208      	adds	r2, #8
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        	   pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 *temp2));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	7c3a      	ldrb	r2, [r7, #16]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7a5b      	ldrb	r3, [r3, #9]
 80016ec:	461a      	mov	r2, r3
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	7c3a      	ldrb	r2, [r7, #16]
 80016fe:	4301      	orrs	r1, r0
 8001700:	3208      	adds	r2, #8
 8001702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
           }
          // temp = 0;
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40013c00 	.word	0x40013c00

0800171c <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber,uint8_t Value)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
 8001728:	4613      	mov	r3, r2
 800172a:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET)
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d109      	bne.n	8001746 <GPIO_WriteToOutputPin+0x2a>
	{
		pGPIOx->ODR |= (1<<PinNumber);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	2101      	movs	r1, #1
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR &= ~(1<<PinNumber);
	}
}
 8001744:	e009      	b.n	800175a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1<<PinNumber);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	43d2      	mvns	r2, r2
 8001754:	401a      	ands	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	615a      	str	r2, [r3, #20]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = (RCC->CFGR >>2) & 0x03;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <RCC_GetPCLK1Value+0x9c>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 800177c:	7a7b      	ldrb	r3, [r7, #9]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <RCC_GetPCLK1Value+0xa0>)
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e00b      	b.n	80017a0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001788:	7a7b      	ldrb	r3, [r7, #9]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d102      	bne.n	8001794 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <RCC_GetPCLK1Value+0xa4>)
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e005      	b.n	80017a0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d102      	bne.n	80017a0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800179a:	f000 f83d 	bl	8001818 <RCC_GetPLLOutputClock>
 800179e:	60f8      	str	r0, [r7, #12]
	}

	//for AHB
	temp = (RCC->CFGR >> 4) & 0xF;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <RCC_GetPCLK1Value+0x9c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80017ae:	7a3b      	ldrb	r3, [r7, #8]
 80017b0:	2b07      	cmp	r3, #7
 80017b2:	d802      	bhi.n	80017ba <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	72fb      	strb	r3, [r7, #11]
 80017b8:	e005      	b.n	80017c6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80017ba:	7a3b      	ldrb	r3, [r7, #8]
 80017bc:	3b08      	subs	r3, #8
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <RCC_GetPCLK1Value+0xa8>)
 80017c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c4:	72fb      	strb	r3, [r7, #11]
	}

	// for APB

	temp = (RCC->CFGR >> 10) & 0x7;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <RCC_GetPCLK1Value+0x9c>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	0a9b      	lsrs	r3, r3, #10
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80017d4:	7a3b      	ldrb	r3, [r7, #8]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d802      	bhi.n	80017e0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	72bb      	strb	r3, [r7, #10]
 80017de:	e004      	b.n	80017ea <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80017e0:	7a3b      	ldrb	r3, [r7, #8]
 80017e2:	3b04      	subs	r3, #4
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <RCC_GetPCLK1Value+0xac>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80017f2:	7abb      	ldrb	r3, [r7, #10]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200
 8001810:	20000000 	.word	0x20000000
 8001814:	20000010 	.word	0x20000010

08001818 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClk / ahbp) / apb2p;

	return pclk2;
}
uint32_t RCC_GetPLLOutputClock(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <__errno>:
 8001828:	4b01      	ldr	r3, [pc, #4]	; (8001830 <__errno+0x8>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000014 	.word	0x20000014

08001834 <__libc_init_array>:
 8001834:	b570      	push	{r4, r5, r6, lr}
 8001836:	4e0d      	ldr	r6, [pc, #52]	; (800186c <__libc_init_array+0x38>)
 8001838:	4c0d      	ldr	r4, [pc, #52]	; (8001870 <__libc_init_array+0x3c>)
 800183a:	1ba4      	subs	r4, r4, r6
 800183c:	10a4      	asrs	r4, r4, #2
 800183e:	2500      	movs	r5, #0
 8001840:	42a5      	cmp	r5, r4
 8001842:	d109      	bne.n	8001858 <__libc_init_array+0x24>
 8001844:	4e0b      	ldr	r6, [pc, #44]	; (8001874 <__libc_init_array+0x40>)
 8001846:	4c0c      	ldr	r4, [pc, #48]	; (8001878 <__libc_init_array+0x44>)
 8001848:	f000 ff30 	bl	80026ac <_init>
 800184c:	1ba4      	subs	r4, r4, r6
 800184e:	10a4      	asrs	r4, r4, #2
 8001850:	2500      	movs	r5, #0
 8001852:	42a5      	cmp	r5, r4
 8001854:	d105      	bne.n	8001862 <__libc_init_array+0x2e>
 8001856:	bd70      	pop	{r4, r5, r6, pc}
 8001858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800185c:	4798      	blx	r3
 800185e:	3501      	adds	r5, #1
 8001860:	e7ee      	b.n	8001840 <__libc_init_array+0xc>
 8001862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001866:	4798      	blx	r3
 8001868:	3501      	adds	r5, #1
 800186a:	e7f2      	b.n	8001852 <__libc_init_array+0x1e>
 800186c:	080027cc 	.word	0x080027cc
 8001870:	080027cc 	.word	0x080027cc
 8001874:	080027cc 	.word	0x080027cc
 8001878:	080027d0 	.word	0x080027d0

0800187c <memset>:
 800187c:	4402      	add	r2, r0
 800187e:	4603      	mov	r3, r0
 8001880:	4293      	cmp	r3, r2
 8001882:	d100      	bne.n	8001886 <memset+0xa>
 8001884:	4770      	bx	lr
 8001886:	f803 1b01 	strb.w	r1, [r3], #1
 800188a:	e7f9      	b.n	8001880 <memset+0x4>

0800188c <_puts_r>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	460e      	mov	r6, r1
 8001890:	4605      	mov	r5, r0
 8001892:	b118      	cbz	r0, 800189c <_puts_r+0x10>
 8001894:	6983      	ldr	r3, [r0, #24]
 8001896:	b90b      	cbnz	r3, 800189c <_puts_r+0x10>
 8001898:	f000 fa0c 	bl	8001cb4 <__sinit>
 800189c:	69ab      	ldr	r3, [r5, #24]
 800189e:	68ac      	ldr	r4, [r5, #8]
 80018a0:	b913      	cbnz	r3, 80018a8 <_puts_r+0x1c>
 80018a2:	4628      	mov	r0, r5
 80018a4:	f000 fa06 	bl	8001cb4 <__sinit>
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <_puts_r+0xac>)
 80018aa:	429c      	cmp	r4, r3
 80018ac:	d117      	bne.n	80018de <_puts_r+0x52>
 80018ae:	686c      	ldr	r4, [r5, #4]
 80018b0:	89a3      	ldrh	r3, [r4, #12]
 80018b2:	071b      	lsls	r3, r3, #28
 80018b4:	d51d      	bpl.n	80018f2 <_puts_r+0x66>
 80018b6:	6923      	ldr	r3, [r4, #16]
 80018b8:	b1db      	cbz	r3, 80018f2 <_puts_r+0x66>
 80018ba:	3e01      	subs	r6, #1
 80018bc:	68a3      	ldr	r3, [r4, #8]
 80018be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80018c2:	3b01      	subs	r3, #1
 80018c4:	60a3      	str	r3, [r4, #8]
 80018c6:	b9e9      	cbnz	r1, 8001904 <_puts_r+0x78>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da2e      	bge.n	800192a <_puts_r+0x9e>
 80018cc:	4622      	mov	r2, r4
 80018ce:	210a      	movs	r1, #10
 80018d0:	4628      	mov	r0, r5
 80018d2:	f000 f83f 	bl	8001954 <__swbuf_r>
 80018d6:	3001      	adds	r0, #1
 80018d8:	d011      	beq.n	80018fe <_puts_r+0x72>
 80018da:	200a      	movs	r0, #10
 80018dc:	e011      	b.n	8001902 <_puts_r+0x76>
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <_puts_r+0xb0>)
 80018e0:	429c      	cmp	r4, r3
 80018e2:	d101      	bne.n	80018e8 <_puts_r+0x5c>
 80018e4:	68ac      	ldr	r4, [r5, #8]
 80018e6:	e7e3      	b.n	80018b0 <_puts_r+0x24>
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_puts_r+0xb4>)
 80018ea:	429c      	cmp	r4, r3
 80018ec:	bf08      	it	eq
 80018ee:	68ec      	ldreq	r4, [r5, #12]
 80018f0:	e7de      	b.n	80018b0 <_puts_r+0x24>
 80018f2:	4621      	mov	r1, r4
 80018f4:	4628      	mov	r0, r5
 80018f6:	f000 f87f 	bl	80019f8 <__swsetup_r>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d0dd      	beq.n	80018ba <_puts_r+0x2e>
 80018fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	2b00      	cmp	r3, #0
 8001906:	da04      	bge.n	8001912 <_puts_r+0x86>
 8001908:	69a2      	ldr	r2, [r4, #24]
 800190a:	429a      	cmp	r2, r3
 800190c:	dc06      	bgt.n	800191c <_puts_r+0x90>
 800190e:	290a      	cmp	r1, #10
 8001910:	d004      	beq.n	800191c <_puts_r+0x90>
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	6022      	str	r2, [r4, #0]
 8001918:	7019      	strb	r1, [r3, #0]
 800191a:	e7cf      	b.n	80018bc <_puts_r+0x30>
 800191c:	4622      	mov	r2, r4
 800191e:	4628      	mov	r0, r5
 8001920:	f000 f818 	bl	8001954 <__swbuf_r>
 8001924:	3001      	adds	r0, #1
 8001926:	d1c9      	bne.n	80018bc <_puts_r+0x30>
 8001928:	e7e9      	b.n	80018fe <_puts_r+0x72>
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	200a      	movs	r0, #10
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	6022      	str	r2, [r4, #0]
 8001932:	7018      	strb	r0, [r3, #0]
 8001934:	e7e5      	b.n	8001902 <_puts_r+0x76>
 8001936:	bf00      	nop
 8001938:	08002770 	.word	0x08002770
 800193c:	08002790 	.word	0x08002790
 8001940:	08002750 	.word	0x08002750

08001944 <puts>:
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <puts+0xc>)
 8001946:	4601      	mov	r1, r0
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	f7ff bf9f 	b.w	800188c <_puts_r>
 800194e:	bf00      	nop
 8001950:	20000014 	.word	0x20000014

08001954 <__swbuf_r>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	460e      	mov	r6, r1
 8001958:	4614      	mov	r4, r2
 800195a:	4605      	mov	r5, r0
 800195c:	b118      	cbz	r0, 8001966 <__swbuf_r+0x12>
 800195e:	6983      	ldr	r3, [r0, #24]
 8001960:	b90b      	cbnz	r3, 8001966 <__swbuf_r+0x12>
 8001962:	f000 f9a7 	bl	8001cb4 <__sinit>
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <__swbuf_r+0x98>)
 8001968:	429c      	cmp	r4, r3
 800196a:	d12a      	bne.n	80019c2 <__swbuf_r+0x6e>
 800196c:	686c      	ldr	r4, [r5, #4]
 800196e:	69a3      	ldr	r3, [r4, #24]
 8001970:	60a3      	str	r3, [r4, #8]
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	071a      	lsls	r2, r3, #28
 8001976:	d52e      	bpl.n	80019d6 <__swbuf_r+0x82>
 8001978:	6923      	ldr	r3, [r4, #16]
 800197a:	b363      	cbz	r3, 80019d6 <__swbuf_r+0x82>
 800197c:	6923      	ldr	r3, [r4, #16]
 800197e:	6820      	ldr	r0, [r4, #0]
 8001980:	1ac0      	subs	r0, r0, r3
 8001982:	6963      	ldr	r3, [r4, #20]
 8001984:	b2f6      	uxtb	r6, r6
 8001986:	4283      	cmp	r3, r0
 8001988:	4637      	mov	r7, r6
 800198a:	dc04      	bgt.n	8001996 <__swbuf_r+0x42>
 800198c:	4621      	mov	r1, r4
 800198e:	4628      	mov	r0, r5
 8001990:	f000 f926 	bl	8001be0 <_fflush_r>
 8001994:	bb28      	cbnz	r0, 80019e2 <__swbuf_r+0x8e>
 8001996:	68a3      	ldr	r3, [r4, #8]
 8001998:	3b01      	subs	r3, #1
 800199a:	60a3      	str	r3, [r4, #8]
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	6022      	str	r2, [r4, #0]
 80019a2:	701e      	strb	r6, [r3, #0]
 80019a4:	6963      	ldr	r3, [r4, #20]
 80019a6:	3001      	adds	r0, #1
 80019a8:	4283      	cmp	r3, r0
 80019aa:	d004      	beq.n	80019b6 <__swbuf_r+0x62>
 80019ac:	89a3      	ldrh	r3, [r4, #12]
 80019ae:	07db      	lsls	r3, r3, #31
 80019b0:	d519      	bpl.n	80019e6 <__swbuf_r+0x92>
 80019b2:	2e0a      	cmp	r6, #10
 80019b4:	d117      	bne.n	80019e6 <__swbuf_r+0x92>
 80019b6:	4621      	mov	r1, r4
 80019b8:	4628      	mov	r0, r5
 80019ba:	f000 f911 	bl	8001be0 <_fflush_r>
 80019be:	b190      	cbz	r0, 80019e6 <__swbuf_r+0x92>
 80019c0:	e00f      	b.n	80019e2 <__swbuf_r+0x8e>
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <__swbuf_r+0x9c>)
 80019c4:	429c      	cmp	r4, r3
 80019c6:	d101      	bne.n	80019cc <__swbuf_r+0x78>
 80019c8:	68ac      	ldr	r4, [r5, #8]
 80019ca:	e7d0      	b.n	800196e <__swbuf_r+0x1a>
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <__swbuf_r+0xa0>)
 80019ce:	429c      	cmp	r4, r3
 80019d0:	bf08      	it	eq
 80019d2:	68ec      	ldreq	r4, [r5, #12]
 80019d4:	e7cb      	b.n	800196e <__swbuf_r+0x1a>
 80019d6:	4621      	mov	r1, r4
 80019d8:	4628      	mov	r0, r5
 80019da:	f000 f80d 	bl	80019f8 <__swsetup_r>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d0cc      	beq.n	800197c <__swbuf_r+0x28>
 80019e2:	f04f 37ff 	mov.w	r7, #4294967295
 80019e6:	4638      	mov	r0, r7
 80019e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	08002770 	.word	0x08002770
 80019f0:	08002790 	.word	0x08002790
 80019f4:	08002750 	.word	0x08002750

080019f8 <__swsetup_r>:
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <__swsetup_r+0xcc>)
 80019fa:	b570      	push	{r4, r5, r6, lr}
 80019fc:	681d      	ldr	r5, [r3, #0]
 80019fe:	4606      	mov	r6, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	b125      	cbz	r5, 8001a0e <__swsetup_r+0x16>
 8001a04:	69ab      	ldr	r3, [r5, #24]
 8001a06:	b913      	cbnz	r3, 8001a0e <__swsetup_r+0x16>
 8001a08:	4628      	mov	r0, r5
 8001a0a:	f000 f953 	bl	8001cb4 <__sinit>
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <__swsetup_r+0xd0>)
 8001a10:	429c      	cmp	r4, r3
 8001a12:	d10f      	bne.n	8001a34 <__swsetup_r+0x3c>
 8001a14:	686c      	ldr	r4, [r5, #4]
 8001a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	0715      	lsls	r5, r2, #28
 8001a1e:	d42c      	bmi.n	8001a7a <__swsetup_r+0x82>
 8001a20:	06d0      	lsls	r0, r2, #27
 8001a22:	d411      	bmi.n	8001a48 <__swsetup_r+0x50>
 8001a24:	2209      	movs	r2, #9
 8001a26:	6032      	str	r2, [r6, #0]
 8001a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2c:	81a3      	strh	r3, [r4, #12]
 8001a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a32:	e03e      	b.n	8001ab2 <__swsetup_r+0xba>
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <__swsetup_r+0xd4>)
 8001a36:	429c      	cmp	r4, r3
 8001a38:	d101      	bne.n	8001a3e <__swsetup_r+0x46>
 8001a3a:	68ac      	ldr	r4, [r5, #8]
 8001a3c:	e7eb      	b.n	8001a16 <__swsetup_r+0x1e>
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <__swsetup_r+0xd8>)
 8001a40:	429c      	cmp	r4, r3
 8001a42:	bf08      	it	eq
 8001a44:	68ec      	ldreq	r4, [r5, #12]
 8001a46:	e7e6      	b.n	8001a16 <__swsetup_r+0x1e>
 8001a48:	0751      	lsls	r1, r2, #29
 8001a4a:	d512      	bpl.n	8001a72 <__swsetup_r+0x7a>
 8001a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a4e:	b141      	cbz	r1, 8001a62 <__swsetup_r+0x6a>
 8001a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a54:	4299      	cmp	r1, r3
 8001a56:	d002      	beq.n	8001a5e <__swsetup_r+0x66>
 8001a58:	4630      	mov	r0, r6
 8001a5a:	f000 fa19 	bl	8001e90 <_free_r>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	6363      	str	r3, [r4, #52]	; 0x34
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a68:	81a3      	strh	r3, [r4, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6063      	str	r3, [r4, #4]
 8001a6e:	6923      	ldr	r3, [r4, #16]
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	81a3      	strh	r3, [r4, #12]
 8001a7a:	6923      	ldr	r3, [r4, #16]
 8001a7c:	b94b      	cbnz	r3, 8001a92 <__swsetup_r+0x9a>
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a88:	d003      	beq.n	8001a92 <__swsetup_r+0x9a>
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f000 f9bf 	bl	8001e10 <__smakebuf_r>
 8001a92:	89a2      	ldrh	r2, [r4, #12]
 8001a94:	f012 0301 	ands.w	r3, r2, #1
 8001a98:	d00c      	beq.n	8001ab4 <__swsetup_r+0xbc>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60a3      	str	r3, [r4, #8]
 8001a9e:	6963      	ldr	r3, [r4, #20]
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	61a3      	str	r3, [r4, #24]
 8001aa4:	6923      	ldr	r3, [r4, #16]
 8001aa6:	b953      	cbnz	r3, 8001abe <__swsetup_r+0xc6>
 8001aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001ab0:	d1ba      	bne.n	8001a28 <__swsetup_r+0x30>
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
 8001ab4:	0792      	lsls	r2, r2, #30
 8001ab6:	bf58      	it	pl
 8001ab8:	6963      	ldrpl	r3, [r4, #20]
 8001aba:	60a3      	str	r3, [r4, #8]
 8001abc:	e7f2      	b.n	8001aa4 <__swsetup_r+0xac>
 8001abe:	2000      	movs	r0, #0
 8001ac0:	e7f7      	b.n	8001ab2 <__swsetup_r+0xba>
 8001ac2:	bf00      	nop
 8001ac4:	20000014 	.word	0x20000014
 8001ac8:	08002770 	.word	0x08002770
 8001acc:	08002790 	.word	0x08002790
 8001ad0:	08002750 	.word	0x08002750

08001ad4 <__sflush_r>:
 8001ad4:	898a      	ldrh	r2, [r1, #12]
 8001ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ada:	4605      	mov	r5, r0
 8001adc:	0710      	lsls	r0, r2, #28
 8001ade:	460c      	mov	r4, r1
 8001ae0:	d458      	bmi.n	8001b94 <__sflush_r+0xc0>
 8001ae2:	684b      	ldr	r3, [r1, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	dc05      	bgt.n	8001af4 <__sflush_r+0x20>
 8001ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	dc02      	bgt.n	8001af4 <__sflush_r+0x20>
 8001aee:	2000      	movs	r0, #0
 8001af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001af6:	2e00      	cmp	r6, #0
 8001af8:	d0f9      	beq.n	8001aee <__sflush_r+0x1a>
 8001afa:	2300      	movs	r3, #0
 8001afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b00:	682f      	ldr	r7, [r5, #0]
 8001b02:	6a21      	ldr	r1, [r4, #32]
 8001b04:	602b      	str	r3, [r5, #0]
 8001b06:	d032      	beq.n	8001b6e <__sflush_r+0x9a>
 8001b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	075a      	lsls	r2, r3, #29
 8001b0e:	d505      	bpl.n	8001b1c <__sflush_r+0x48>
 8001b10:	6863      	ldr	r3, [r4, #4]
 8001b12:	1ac0      	subs	r0, r0, r3
 8001b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b16:	b10b      	cbz	r3, 8001b1c <__sflush_r+0x48>
 8001b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b1a:	1ac0      	subs	r0, r0, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b22:	6a21      	ldr	r1, [r4, #32]
 8001b24:	4628      	mov	r0, r5
 8001b26:	47b0      	blx	r6
 8001b28:	1c43      	adds	r3, r0, #1
 8001b2a:	89a3      	ldrh	r3, [r4, #12]
 8001b2c:	d106      	bne.n	8001b3c <__sflush_r+0x68>
 8001b2e:	6829      	ldr	r1, [r5, #0]
 8001b30:	291d      	cmp	r1, #29
 8001b32:	d848      	bhi.n	8001bc6 <__sflush_r+0xf2>
 8001b34:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <__sflush_r+0x108>)
 8001b36:	40ca      	lsrs	r2, r1
 8001b38:	07d6      	lsls	r6, r2, #31
 8001b3a:	d544      	bpl.n	8001bc6 <__sflush_r+0xf2>
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6062      	str	r2, [r4, #4]
 8001b40:	04d9      	lsls	r1, r3, #19
 8001b42:	6922      	ldr	r2, [r4, #16]
 8001b44:	6022      	str	r2, [r4, #0]
 8001b46:	d504      	bpl.n	8001b52 <__sflush_r+0x7e>
 8001b48:	1c42      	adds	r2, r0, #1
 8001b4a:	d101      	bne.n	8001b50 <__sflush_r+0x7c>
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	b903      	cbnz	r3, 8001b52 <__sflush_r+0x7e>
 8001b50:	6560      	str	r0, [r4, #84]	; 0x54
 8001b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b54:	602f      	str	r7, [r5, #0]
 8001b56:	2900      	cmp	r1, #0
 8001b58:	d0c9      	beq.n	8001aee <__sflush_r+0x1a>
 8001b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b5e:	4299      	cmp	r1, r3
 8001b60:	d002      	beq.n	8001b68 <__sflush_r+0x94>
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 f994 	bl	8001e90 <_free_r>
 8001b68:	2000      	movs	r0, #0
 8001b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8001b6c:	e7c0      	b.n	8001af0 <__sflush_r+0x1c>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	4628      	mov	r0, r5
 8001b72:	47b0      	blx	r6
 8001b74:	1c41      	adds	r1, r0, #1
 8001b76:	d1c8      	bne.n	8001b0a <__sflush_r+0x36>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0c5      	beq.n	8001b0a <__sflush_r+0x36>
 8001b7e:	2b1d      	cmp	r3, #29
 8001b80:	d001      	beq.n	8001b86 <__sflush_r+0xb2>
 8001b82:	2b16      	cmp	r3, #22
 8001b84:	d101      	bne.n	8001b8a <__sflush_r+0xb6>
 8001b86:	602f      	str	r7, [r5, #0]
 8001b88:	e7b1      	b.n	8001aee <__sflush_r+0x1a>
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b90:	81a3      	strh	r3, [r4, #12]
 8001b92:	e7ad      	b.n	8001af0 <__sflush_r+0x1c>
 8001b94:	690f      	ldr	r7, [r1, #16]
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d0a9      	beq.n	8001aee <__sflush_r+0x1a>
 8001b9a:	0793      	lsls	r3, r2, #30
 8001b9c:	680e      	ldr	r6, [r1, #0]
 8001b9e:	bf08      	it	eq
 8001ba0:	694b      	ldreq	r3, [r1, #20]
 8001ba2:	600f      	str	r7, [r1, #0]
 8001ba4:	bf18      	it	ne
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	eba6 0807 	sub.w	r8, r6, r7
 8001bac:	608b      	str	r3, [r1, #8]
 8001bae:	f1b8 0f00 	cmp.w	r8, #0
 8001bb2:	dd9c      	ble.n	8001aee <__sflush_r+0x1a>
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	463a      	mov	r2, r7
 8001bb8:	6a21      	ldr	r1, [r4, #32]
 8001bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	47b0      	blx	r6
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	dc06      	bgt.n	8001bd2 <__sflush_r+0xfe>
 8001bc4:	89a3      	ldrh	r3, [r4, #12]
 8001bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bca:	81a3      	strh	r3, [r4, #12]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	e78e      	b.n	8001af0 <__sflush_r+0x1c>
 8001bd2:	4407      	add	r7, r0
 8001bd4:	eba8 0800 	sub.w	r8, r8, r0
 8001bd8:	e7e9      	b.n	8001bae <__sflush_r+0xda>
 8001bda:	bf00      	nop
 8001bdc:	20400001 	.word	0x20400001

08001be0 <_fflush_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	690b      	ldr	r3, [r1, #16]
 8001be4:	4605      	mov	r5, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	b1db      	cbz	r3, 8001c22 <_fflush_r+0x42>
 8001bea:	b118      	cbz	r0, 8001bf4 <_fflush_r+0x14>
 8001bec:	6983      	ldr	r3, [r0, #24]
 8001bee:	b90b      	cbnz	r3, 8001bf4 <_fflush_r+0x14>
 8001bf0:	f000 f860 	bl	8001cb4 <__sinit>
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <_fflush_r+0x48>)
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	d109      	bne.n	8001c0e <_fflush_r+0x2e>
 8001bfa:	686c      	ldr	r4, [r5, #4]
 8001bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c00:	b17b      	cbz	r3, 8001c22 <_fflush_r+0x42>
 8001c02:	4621      	mov	r1, r4
 8001c04:	4628      	mov	r0, r5
 8001c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c0a:	f7ff bf63 	b.w	8001ad4 <__sflush_r>
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_fflush_r+0x4c>)
 8001c10:	429c      	cmp	r4, r3
 8001c12:	d101      	bne.n	8001c18 <_fflush_r+0x38>
 8001c14:	68ac      	ldr	r4, [r5, #8]
 8001c16:	e7f1      	b.n	8001bfc <_fflush_r+0x1c>
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <_fflush_r+0x50>)
 8001c1a:	429c      	cmp	r4, r3
 8001c1c:	bf08      	it	eq
 8001c1e:	68ec      	ldreq	r4, [r5, #12]
 8001c20:	e7ec      	b.n	8001bfc <_fflush_r+0x1c>
 8001c22:	2000      	movs	r0, #0
 8001c24:	bd38      	pop	{r3, r4, r5, pc}
 8001c26:	bf00      	nop
 8001c28:	08002770 	.word	0x08002770
 8001c2c:	08002790 	.word	0x08002790
 8001c30:	08002750 	.word	0x08002750

08001c34 <std>:
 8001c34:	2300      	movs	r3, #0
 8001c36:	b510      	push	{r4, lr}
 8001c38:	4604      	mov	r4, r0
 8001c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8001c3e:	6083      	str	r3, [r0, #8]
 8001c40:	8181      	strh	r1, [r0, #12]
 8001c42:	6643      	str	r3, [r0, #100]	; 0x64
 8001c44:	81c2      	strh	r2, [r0, #14]
 8001c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c4a:	6183      	str	r3, [r0, #24]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	2208      	movs	r2, #8
 8001c50:	305c      	adds	r0, #92	; 0x5c
 8001c52:	f7ff fe13 	bl	800187c <memset>
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <std+0x38>)
 8001c58:	6263      	str	r3, [r4, #36]	; 0x24
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <std+0x3c>)
 8001c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <std+0x40>)
 8001c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <std+0x44>)
 8001c64:	6224      	str	r4, [r4, #32]
 8001c66:	6323      	str	r3, [r4, #48]	; 0x30
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	bf00      	nop
 8001c6c:	08002001 	.word	0x08002001
 8001c70:	08002023 	.word	0x08002023
 8001c74:	0800205b 	.word	0x0800205b
 8001c78:	0800207f 	.word	0x0800207f

08001c7c <_cleanup_r>:
 8001c7c:	4901      	ldr	r1, [pc, #4]	; (8001c84 <_cleanup_r+0x8>)
 8001c7e:	f000 b885 	b.w	8001d8c <_fwalk_reent>
 8001c82:	bf00      	nop
 8001c84:	08001be1 	.word	0x08001be1

08001c88 <__sfmoreglue>:
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	1e4a      	subs	r2, r1, #1
 8001c8c:	2568      	movs	r5, #104	; 0x68
 8001c8e:	4355      	muls	r5, r2
 8001c90:	460e      	mov	r6, r1
 8001c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c96:	f000 f949 	bl	8001f2c <_malloc_r>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	b140      	cbz	r0, 8001cb0 <__sfmoreglue+0x28>
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ca4:	300c      	adds	r0, #12
 8001ca6:	60a0      	str	r0, [r4, #8]
 8001ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001cac:	f7ff fde6 	bl	800187c <memset>
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}

08001cb4 <__sinit>:
 8001cb4:	6983      	ldr	r3, [r0, #24]
 8001cb6:	b510      	push	{r4, lr}
 8001cb8:	4604      	mov	r4, r0
 8001cba:	bb33      	cbnz	r3, 8001d0a <__sinit+0x56>
 8001cbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001cc0:	6503      	str	r3, [r0, #80]	; 0x50
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <__sinit+0x58>)
 8001cc4:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <__sinit+0x5c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6282      	str	r2, [r0, #40]	; 0x28
 8001cca:	4298      	cmp	r0, r3
 8001ccc:	bf04      	itt	eq
 8001cce:	2301      	moveq	r3, #1
 8001cd0:	6183      	streq	r3, [r0, #24]
 8001cd2:	f000 f81f 	bl	8001d14 <__sfp>
 8001cd6:	6060      	str	r0, [r4, #4]
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f000 f81b 	bl	8001d14 <__sfp>
 8001cde:	60a0      	str	r0, [r4, #8]
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f000 f817 	bl	8001d14 <__sfp>
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60e0      	str	r0, [r4, #12]
 8001cea:	2104      	movs	r1, #4
 8001cec:	6860      	ldr	r0, [r4, #4]
 8001cee:	f7ff ffa1 	bl	8001c34 <std>
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2109      	movs	r1, #9
 8001cf6:	68a0      	ldr	r0, [r4, #8]
 8001cf8:	f7ff ff9c 	bl	8001c34 <std>
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	2112      	movs	r1, #18
 8001d00:	68e0      	ldr	r0, [r4, #12]
 8001d02:	f7ff ff97 	bl	8001c34 <std>
 8001d06:	2301      	movs	r3, #1
 8001d08:	61a3      	str	r3, [r4, #24]
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	0800274c 	.word	0x0800274c
 8001d10:	08001c7d 	.word	0x08001c7d

08001d14 <__sfp>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <__sfp+0x70>)
 8001d18:	681e      	ldr	r6, [r3, #0]
 8001d1a:	69b3      	ldr	r3, [r6, #24]
 8001d1c:	4607      	mov	r7, r0
 8001d1e:	b913      	cbnz	r3, 8001d26 <__sfp+0x12>
 8001d20:	4630      	mov	r0, r6
 8001d22:	f7ff ffc7 	bl	8001cb4 <__sinit>
 8001d26:	3648      	adds	r6, #72	; 0x48
 8001d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	d503      	bpl.n	8001d38 <__sfp+0x24>
 8001d30:	6833      	ldr	r3, [r6, #0]
 8001d32:	b133      	cbz	r3, 8001d42 <__sfp+0x2e>
 8001d34:	6836      	ldr	r6, [r6, #0]
 8001d36:	e7f7      	b.n	8001d28 <__sfp+0x14>
 8001d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d3c:	b16d      	cbz	r5, 8001d5a <__sfp+0x46>
 8001d3e:	3468      	adds	r4, #104	; 0x68
 8001d40:	e7f4      	b.n	8001d2c <__sfp+0x18>
 8001d42:	2104      	movs	r1, #4
 8001d44:	4638      	mov	r0, r7
 8001d46:	f7ff ff9f 	bl	8001c88 <__sfmoreglue>
 8001d4a:	6030      	str	r0, [r6, #0]
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d1f1      	bne.n	8001d34 <__sfp+0x20>
 8001d50:	230c      	movs	r3, #12
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	4604      	mov	r4, r0
 8001d56:	4620      	mov	r0, r4
 8001d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <__sfp+0x74>)
 8001d5c:	6665      	str	r5, [r4, #100]	; 0x64
 8001d5e:	e9c4 5500 	strd	r5, r5, [r4]
 8001d62:	60a5      	str	r5, [r4, #8]
 8001d64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001d68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d74:	f7ff fd82 	bl	800187c <memset>
 8001d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d80:	e7e9      	b.n	8001d56 <__sfp+0x42>
 8001d82:	bf00      	nop
 8001d84:	0800274c 	.word	0x0800274c
 8001d88:	ffff0001 	.word	0xffff0001

08001d8c <_fwalk_reent>:
 8001d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d90:	4680      	mov	r8, r0
 8001d92:	4689      	mov	r9, r1
 8001d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d98:	2600      	movs	r6, #0
 8001d9a:	b914      	cbnz	r4, 8001da2 <_fwalk_reent+0x16>
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001da2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001da6:	3f01      	subs	r7, #1
 8001da8:	d501      	bpl.n	8001dae <_fwalk_reent+0x22>
 8001daa:	6824      	ldr	r4, [r4, #0]
 8001dac:	e7f5      	b.n	8001d9a <_fwalk_reent+0xe>
 8001dae:	89ab      	ldrh	r3, [r5, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d907      	bls.n	8001dc4 <_fwalk_reent+0x38>
 8001db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001db8:	3301      	adds	r3, #1
 8001dba:	d003      	beq.n	8001dc4 <_fwalk_reent+0x38>
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	4640      	mov	r0, r8
 8001dc0:	47c8      	blx	r9
 8001dc2:	4306      	orrs	r6, r0
 8001dc4:	3568      	adds	r5, #104	; 0x68
 8001dc6:	e7ee      	b.n	8001da6 <_fwalk_reent+0x1a>

08001dc8 <__swhatbuf_r>:
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	460e      	mov	r6, r1
 8001dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd0:	2900      	cmp	r1, #0
 8001dd2:	b096      	sub	sp, #88	; 0x58
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	da07      	bge.n	8001dea <__swhatbuf_r+0x22>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	602b      	str	r3, [r5, #0]
 8001dde:	89b3      	ldrh	r3, [r6, #12]
 8001de0:	061a      	lsls	r2, r3, #24
 8001de2:	d410      	bmi.n	8001e06 <__swhatbuf_r+0x3e>
 8001de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de8:	e00e      	b.n	8001e08 <__swhatbuf_r+0x40>
 8001dea:	466a      	mov	r2, sp
 8001dec:	f000 f96e 	bl	80020cc <_fstat_r>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	dbf2      	blt.n	8001dda <__swhatbuf_r+0x12>
 8001df4:	9a01      	ldr	r2, [sp, #4]
 8001df6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001dfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001dfe:	425a      	negs	r2, r3
 8001e00:	415a      	adcs	r2, r3
 8001e02:	602a      	str	r2, [r5, #0]
 8001e04:	e7ee      	b.n	8001de4 <__swhatbuf_r+0x1c>
 8001e06:	2340      	movs	r3, #64	; 0x40
 8001e08:	2000      	movs	r0, #0
 8001e0a:	6023      	str	r3, [r4, #0]
 8001e0c:	b016      	add	sp, #88	; 0x58
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}

08001e10 <__smakebuf_r>:
 8001e10:	898b      	ldrh	r3, [r1, #12]
 8001e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e14:	079d      	lsls	r5, r3, #30
 8001e16:	4606      	mov	r6, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	d507      	bpl.n	8001e2c <__smakebuf_r+0x1c>
 8001e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	6123      	str	r3, [r4, #16]
 8001e24:	2301      	movs	r3, #1
 8001e26:	6163      	str	r3, [r4, #20]
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	ab01      	add	r3, sp, #4
 8001e2e:	466a      	mov	r2, sp
 8001e30:	f7ff ffca 	bl	8001dc8 <__swhatbuf_r>
 8001e34:	9900      	ldr	r1, [sp, #0]
 8001e36:	4605      	mov	r5, r0
 8001e38:	4630      	mov	r0, r6
 8001e3a:	f000 f877 	bl	8001f2c <_malloc_r>
 8001e3e:	b948      	cbnz	r0, 8001e54 <__smakebuf_r+0x44>
 8001e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e44:	059a      	lsls	r2, r3, #22
 8001e46:	d4ef      	bmi.n	8001e28 <__smakebuf_r+0x18>
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	81a3      	strh	r3, [r4, #12]
 8001e52:	e7e3      	b.n	8001e1c <__smakebuf_r+0xc>
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <__smakebuf_r+0x7c>)
 8001e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	6020      	str	r0, [r4, #0]
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e60:	81a3      	strh	r3, [r4, #12]
 8001e62:	9b00      	ldr	r3, [sp, #0]
 8001e64:	6163      	str	r3, [r4, #20]
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	6120      	str	r0, [r4, #16]
 8001e6a:	b15b      	cbz	r3, 8001e84 <__smakebuf_r+0x74>
 8001e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e70:	4630      	mov	r0, r6
 8001e72:	f000 f93d 	bl	80020f0 <_isatty_r>
 8001e76:	b128      	cbz	r0, 8001e84 <__smakebuf_r+0x74>
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	81a3      	strh	r3, [r4, #12]
 8001e84:	89a3      	ldrh	r3, [r4, #12]
 8001e86:	431d      	orrs	r5, r3
 8001e88:	81a5      	strh	r5, [r4, #12]
 8001e8a:	e7cd      	b.n	8001e28 <__smakebuf_r+0x18>
 8001e8c:	08001c7d 	.word	0x08001c7d

08001e90 <_free_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	4605      	mov	r5, r0
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d045      	beq.n	8001f24 <_free_r+0x94>
 8001e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e9c:	1f0c      	subs	r4, r1, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bfb8      	it	lt
 8001ea2:	18e4      	addlt	r4, r4, r3
 8001ea4:	f000 f946 	bl	8002134 <__malloc_lock>
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <_free_r+0x98>)
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	4610      	mov	r0, r2
 8001eae:	b933      	cbnz	r3, 8001ebe <_free_r+0x2e>
 8001eb0:	6063      	str	r3, [r4, #4]
 8001eb2:	6014      	str	r4, [r2, #0]
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eba:	f000 b93c 	b.w	8002136 <__malloc_unlock>
 8001ebe:	42a3      	cmp	r3, r4
 8001ec0:	d90c      	bls.n	8001edc <_free_r+0x4c>
 8001ec2:	6821      	ldr	r1, [r4, #0]
 8001ec4:	1862      	adds	r2, r4, r1
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	bf04      	itt	eq
 8001eca:	681a      	ldreq	r2, [r3, #0]
 8001ecc:	685b      	ldreq	r3, [r3, #4]
 8001ece:	6063      	str	r3, [r4, #4]
 8001ed0:	bf04      	itt	eq
 8001ed2:	1852      	addeq	r2, r2, r1
 8001ed4:	6022      	streq	r2, [r4, #0]
 8001ed6:	6004      	str	r4, [r0, #0]
 8001ed8:	e7ec      	b.n	8001eb4 <_free_r+0x24>
 8001eda:	4613      	mov	r3, r2
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	b10a      	cbz	r2, 8001ee4 <_free_r+0x54>
 8001ee0:	42a2      	cmp	r2, r4
 8001ee2:	d9fa      	bls.n	8001eda <_free_r+0x4a>
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	1858      	adds	r0, r3, r1
 8001ee8:	42a0      	cmp	r0, r4
 8001eea:	d10b      	bne.n	8001f04 <_free_r+0x74>
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	4401      	add	r1, r0
 8001ef0:	1858      	adds	r0, r3, r1
 8001ef2:	4282      	cmp	r2, r0
 8001ef4:	6019      	str	r1, [r3, #0]
 8001ef6:	d1dd      	bne.n	8001eb4 <_free_r+0x24>
 8001ef8:	6810      	ldr	r0, [r2, #0]
 8001efa:	6852      	ldr	r2, [r2, #4]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	4401      	add	r1, r0
 8001f00:	6019      	str	r1, [r3, #0]
 8001f02:	e7d7      	b.n	8001eb4 <_free_r+0x24>
 8001f04:	d902      	bls.n	8001f0c <_free_r+0x7c>
 8001f06:	230c      	movs	r3, #12
 8001f08:	602b      	str	r3, [r5, #0]
 8001f0a:	e7d3      	b.n	8001eb4 <_free_r+0x24>
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	1821      	adds	r1, r4, r0
 8001f10:	428a      	cmp	r2, r1
 8001f12:	bf04      	itt	eq
 8001f14:	6811      	ldreq	r1, [r2, #0]
 8001f16:	6852      	ldreq	r2, [r2, #4]
 8001f18:	6062      	str	r2, [r4, #4]
 8001f1a:	bf04      	itt	eq
 8001f1c:	1809      	addeq	r1, r1, r0
 8001f1e:	6021      	streq	r1, [r4, #0]
 8001f20:	605c      	str	r4, [r3, #4]
 8001f22:	e7c7      	b.n	8001eb4 <_free_r+0x24>
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
 8001f26:	bf00      	nop
 8001f28:	200000b8 	.word	0x200000b8

08001f2c <_malloc_r>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	1ccd      	adds	r5, r1, #3
 8001f30:	f025 0503 	bic.w	r5, r5, #3
 8001f34:	3508      	adds	r5, #8
 8001f36:	2d0c      	cmp	r5, #12
 8001f38:	bf38      	it	cc
 8001f3a:	250c      	movcc	r5, #12
 8001f3c:	2d00      	cmp	r5, #0
 8001f3e:	4606      	mov	r6, r0
 8001f40:	db01      	blt.n	8001f46 <_malloc_r+0x1a>
 8001f42:	42a9      	cmp	r1, r5
 8001f44:	d903      	bls.n	8001f4e <_malloc_r+0x22>
 8001f46:	230c      	movs	r3, #12
 8001f48:	6033      	str	r3, [r6, #0]
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	f000 f8f1 	bl	8002134 <__malloc_lock>
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <_malloc_r+0xac>)
 8001f54:	6814      	ldr	r4, [r2, #0]
 8001f56:	4621      	mov	r1, r4
 8001f58:	b991      	cbnz	r1, 8001f80 <_malloc_r+0x54>
 8001f5a:	4c20      	ldr	r4, [pc, #128]	; (8001fdc <_malloc_r+0xb0>)
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	b91b      	cbnz	r3, 8001f68 <_malloc_r+0x3c>
 8001f60:	4630      	mov	r0, r6
 8001f62:	f000 f83d 	bl	8001fe0 <_sbrk_r>
 8001f66:	6020      	str	r0, [r4, #0]
 8001f68:	4629      	mov	r1, r5
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f000 f838 	bl	8001fe0 <_sbrk_r>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d124      	bne.n	8001fbe <_malloc_r+0x92>
 8001f74:	230c      	movs	r3, #12
 8001f76:	6033      	str	r3, [r6, #0]
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f000 f8dc 	bl	8002136 <__malloc_unlock>
 8001f7e:	e7e4      	b.n	8001f4a <_malloc_r+0x1e>
 8001f80:	680b      	ldr	r3, [r1, #0]
 8001f82:	1b5b      	subs	r3, r3, r5
 8001f84:	d418      	bmi.n	8001fb8 <_malloc_r+0x8c>
 8001f86:	2b0b      	cmp	r3, #11
 8001f88:	d90f      	bls.n	8001faa <_malloc_r+0x7e>
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	50cd      	str	r5, [r1, r3]
 8001f8e:	18cc      	adds	r4, r1, r3
 8001f90:	4630      	mov	r0, r6
 8001f92:	f000 f8d0 	bl	8002136 <__malloc_unlock>
 8001f96:	f104 000b 	add.w	r0, r4, #11
 8001f9a:	1d23      	adds	r3, r4, #4
 8001f9c:	f020 0007 	bic.w	r0, r0, #7
 8001fa0:	1ac3      	subs	r3, r0, r3
 8001fa2:	d0d3      	beq.n	8001f4c <_malloc_r+0x20>
 8001fa4:	425a      	negs	r2, r3
 8001fa6:	50e2      	str	r2, [r4, r3]
 8001fa8:	e7d0      	b.n	8001f4c <_malloc_r+0x20>
 8001faa:	428c      	cmp	r4, r1
 8001fac:	684b      	ldr	r3, [r1, #4]
 8001fae:	bf16      	itet	ne
 8001fb0:	6063      	strne	r3, [r4, #4]
 8001fb2:	6013      	streq	r3, [r2, #0]
 8001fb4:	460c      	movne	r4, r1
 8001fb6:	e7eb      	b.n	8001f90 <_malloc_r+0x64>
 8001fb8:	460c      	mov	r4, r1
 8001fba:	6849      	ldr	r1, [r1, #4]
 8001fbc:	e7cc      	b.n	8001f58 <_malloc_r+0x2c>
 8001fbe:	1cc4      	adds	r4, r0, #3
 8001fc0:	f024 0403 	bic.w	r4, r4, #3
 8001fc4:	42a0      	cmp	r0, r4
 8001fc6:	d005      	beq.n	8001fd4 <_malloc_r+0xa8>
 8001fc8:	1a21      	subs	r1, r4, r0
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f000 f808 	bl	8001fe0 <_sbrk_r>
 8001fd0:	3001      	adds	r0, #1
 8001fd2:	d0cf      	beq.n	8001f74 <_malloc_r+0x48>
 8001fd4:	6025      	str	r5, [r4, #0]
 8001fd6:	e7db      	b.n	8001f90 <_malloc_r+0x64>
 8001fd8:	200000b8 	.word	0x200000b8
 8001fdc:	200000bc 	.word	0x200000bc

08001fe0 <_sbrk_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	4c06      	ldr	r4, [pc, #24]	; (8001ffc <_sbrk_r+0x1c>)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	4608      	mov	r0, r1
 8001fea:	6023      	str	r3, [r4, #0]
 8001fec:	f7fe fa7e 	bl	80004ec <_sbrk>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	d102      	bne.n	8001ffa <_sbrk_r+0x1a>
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	b103      	cbz	r3, 8001ffa <_sbrk_r+0x1a>
 8001ff8:	602b      	str	r3, [r5, #0]
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	20000194 	.word	0x20000194

08002000 <__sread>:
 8002000:	b510      	push	{r4, lr}
 8002002:	460c      	mov	r4, r1
 8002004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002008:	f000 f896 	bl	8002138 <_read_r>
 800200c:	2800      	cmp	r0, #0
 800200e:	bfab      	itete	ge
 8002010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002012:	89a3      	ldrhlt	r3, [r4, #12]
 8002014:	181b      	addge	r3, r3, r0
 8002016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800201a:	bfac      	ite	ge
 800201c:	6563      	strge	r3, [r4, #84]	; 0x54
 800201e:	81a3      	strhlt	r3, [r4, #12]
 8002020:	bd10      	pop	{r4, pc}

08002022 <__swrite>:
 8002022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002026:	461f      	mov	r7, r3
 8002028:	898b      	ldrh	r3, [r1, #12]
 800202a:	05db      	lsls	r3, r3, #23
 800202c:	4605      	mov	r5, r0
 800202e:	460c      	mov	r4, r1
 8002030:	4616      	mov	r6, r2
 8002032:	d505      	bpl.n	8002040 <__swrite+0x1e>
 8002034:	2302      	movs	r3, #2
 8002036:	2200      	movs	r2, #0
 8002038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203c:	f000 f868 	bl	8002110 <_lseek_r>
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800204a:	81a3      	strh	r3, [r4, #12]
 800204c:	4632      	mov	r2, r6
 800204e:	463b      	mov	r3, r7
 8002050:	4628      	mov	r0, r5
 8002052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002056:	f000 b817 	b.w	8002088 <_write_r>

0800205a <__sseek>:
 800205a:	b510      	push	{r4, lr}
 800205c:	460c      	mov	r4, r1
 800205e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002062:	f000 f855 	bl	8002110 <_lseek_r>
 8002066:	1c43      	adds	r3, r0, #1
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	bf15      	itete	ne
 800206c:	6560      	strne	r0, [r4, #84]	; 0x54
 800206e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002076:	81a3      	strheq	r3, [r4, #12]
 8002078:	bf18      	it	ne
 800207a:	81a3      	strhne	r3, [r4, #12]
 800207c:	bd10      	pop	{r4, pc}

0800207e <__sclose>:
 800207e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002082:	f000 b813 	b.w	80020ac <_close_r>
	...

08002088 <_write_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4c07      	ldr	r4, [pc, #28]	; (80020a8 <_write_r+0x20>)
 800208c:	4605      	mov	r5, r0
 800208e:	4608      	mov	r0, r1
 8002090:	4611      	mov	r1, r2
 8002092:	2200      	movs	r2, #0
 8002094:	6022      	str	r2, [r4, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	f000 f911 	bl	80022be <_write>
 800209c:	1c43      	adds	r3, r0, #1
 800209e:	d102      	bne.n	80020a6 <_write_r+0x1e>
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	b103      	cbz	r3, 80020a6 <_write_r+0x1e>
 80020a4:	602b      	str	r3, [r5, #0]
 80020a6:	bd38      	pop	{r3, r4, r5, pc}
 80020a8:	20000194 	.word	0x20000194

080020ac <_close_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4c06      	ldr	r4, [pc, #24]	; (80020c8 <_close_r+0x1c>)
 80020b0:	2300      	movs	r3, #0
 80020b2:	4605      	mov	r5, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	6023      	str	r3, [r4, #0]
 80020b8:	f000 f930 	bl	800231c <_close>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d102      	bne.n	80020c6 <_close_r+0x1a>
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	b103      	cbz	r3, 80020c6 <_close_r+0x1a>
 80020c4:	602b      	str	r3, [r5, #0]
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	20000194 	.word	0x20000194

080020cc <_fstat_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	4c07      	ldr	r4, [pc, #28]	; (80020ec <_fstat_r+0x20>)
 80020d0:	2300      	movs	r3, #0
 80020d2:	4605      	mov	r5, r0
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	f000 f966 	bl	80023aa <_fstat>
 80020de:	1c43      	adds	r3, r0, #1
 80020e0:	d102      	bne.n	80020e8 <_fstat_r+0x1c>
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	b103      	cbz	r3, 80020e8 <_fstat_r+0x1c>
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	bd38      	pop	{r3, r4, r5, pc}
 80020ea:	bf00      	nop
 80020ec:	20000194 	.word	0x20000194

080020f0 <_isatty_r>:
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	4c06      	ldr	r4, [pc, #24]	; (800210c <_isatty_r+0x1c>)
 80020f4:	2300      	movs	r3, #0
 80020f6:	4605      	mov	r5, r0
 80020f8:	4608      	mov	r0, r1
 80020fa:	6023      	str	r3, [r4, #0]
 80020fc:	f000 faba 	bl	8002674 <_isatty>
 8002100:	1c43      	adds	r3, r0, #1
 8002102:	d102      	bne.n	800210a <_isatty_r+0x1a>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	b103      	cbz	r3, 800210a <_isatty_r+0x1a>
 8002108:	602b      	str	r3, [r5, #0]
 800210a:	bd38      	pop	{r3, r4, r5, pc}
 800210c:	20000194 	.word	0x20000194

08002110 <_lseek_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4c07      	ldr	r4, [pc, #28]	; (8002130 <_lseek_r+0x20>)
 8002114:	4605      	mov	r5, r0
 8002116:	4608      	mov	r0, r1
 8002118:	4611      	mov	r1, r2
 800211a:	2200      	movs	r2, #0
 800211c:	6022      	str	r2, [r4, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	f000 f8bb 	bl	800229a <_lseek>
 8002124:	1c43      	adds	r3, r0, #1
 8002126:	d102      	bne.n	800212e <_lseek_r+0x1e>
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	b103      	cbz	r3, 800212e <_lseek_r+0x1e>
 800212c:	602b      	str	r3, [r5, #0]
 800212e:	bd38      	pop	{r3, r4, r5, pc}
 8002130:	20000194 	.word	0x20000194

08002134 <__malloc_lock>:
 8002134:	4770      	bx	lr

08002136 <__malloc_unlock>:
 8002136:	4770      	bx	lr

08002138 <_read_r>:
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4c07      	ldr	r4, [pc, #28]	; (8002158 <_read_r+0x20>)
 800213c:	4605      	mov	r5, r0
 800213e:	4608      	mov	r0, r1
 8002140:	4611      	mov	r1, r2
 8002142:	2200      	movs	r2, #0
 8002144:	6022      	str	r2, [r4, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	f000 f850 	bl	80021ec <_read>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	d102      	bne.n	8002156 <_read_r+0x1e>
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	b103      	cbz	r3, 8002156 <_read_r+0x1e>
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	20000194 	.word	0x20000194

0800215c <findslot>:
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <findslot+0x2c>)
 800215e:	b510      	push	{r4, lr}
 8002160:	4604      	mov	r4, r0
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	b118      	cbz	r0, 800216e <findslot+0x12>
 8002166:	6983      	ldr	r3, [r0, #24]
 8002168:	b90b      	cbnz	r3, 800216e <findslot+0x12>
 800216a:	f7ff fda3 	bl	8001cb4 <__sinit>
 800216e:	2c13      	cmp	r4, #19
 8002170:	d807      	bhi.n	8002182 <findslot+0x26>
 8002172:	4806      	ldr	r0, [pc, #24]	; (800218c <findslot+0x30>)
 8002174:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002178:	3301      	adds	r3, #1
 800217a:	d002      	beq.n	8002182 <findslot+0x26>
 800217c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002180:	bd10      	pop	{r4, pc}
 8002182:	2000      	movs	r0, #0
 8002184:	e7fc      	b.n	8002180 <findslot+0x24>
 8002186:	bf00      	nop
 8002188:	20000014 	.word	0x20000014
 800218c:	200000cc 	.word	0x200000cc

08002190 <checkerror>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	1c43      	adds	r3, r0, #1
 8002194:	4605      	mov	r5, r0
 8002196:	d109      	bne.n	80021ac <checkerror+0x1c>
 8002198:	f7ff fb46 	bl	8001828 <__errno>
 800219c:	2413      	movs	r4, #19
 800219e:	4606      	mov	r6, r0
 80021a0:	2700      	movs	r7, #0
 80021a2:	4620      	mov	r0, r4
 80021a4:	4639      	mov	r1, r7
 80021a6:	beab      	bkpt	0x00ab
 80021a8:	4604      	mov	r4, r0
 80021aa:	6034      	str	r4, [r6, #0]
 80021ac:	4628      	mov	r0, r5
 80021ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021b0 <error>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	4605      	mov	r5, r0
 80021b4:	f7ff fb38 	bl	8001828 <__errno>
 80021b8:	2413      	movs	r4, #19
 80021ba:	4606      	mov	r6, r0
 80021bc:	2700      	movs	r7, #0
 80021be:	4620      	mov	r0, r4
 80021c0:	4639      	mov	r1, r7
 80021c2:	beab      	bkpt	0x00ab
 80021c4:	4604      	mov	r4, r0
 80021c6:	6034      	str	r4, [r6, #0]
 80021c8:	4628      	mov	r0, r5
 80021ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021cc <_swiread>:
 80021cc:	b530      	push	{r4, r5, lr}
 80021ce:	b085      	sub	sp, #20
 80021d0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80021d4:	9203      	str	r2, [sp, #12]
 80021d6:	2406      	movs	r4, #6
 80021d8:	ad01      	add	r5, sp, #4
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	beab      	bkpt	0x00ab
 80021e0:	4604      	mov	r4, r0
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ffd4 	bl	8002190 <checkerror>
 80021e8:	b005      	add	sp, #20
 80021ea:	bd30      	pop	{r4, r5, pc}

080021ec <_read>:
 80021ec:	b570      	push	{r4, r5, r6, lr}
 80021ee:	460e      	mov	r6, r1
 80021f0:	4615      	mov	r5, r2
 80021f2:	f7ff ffb3 	bl	800215c <findslot>
 80021f6:	4604      	mov	r4, r0
 80021f8:	b930      	cbnz	r0, 8002208 <_read+0x1c>
 80021fa:	f7ff fb15 	bl	8001828 <__errno>
 80021fe:	2309      	movs	r3, #9
 8002200:	6003      	str	r3, [r0, #0]
 8002202:	f04f 30ff 	mov.w	r0, #4294967295
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	462a      	mov	r2, r5
 800220a:	4631      	mov	r1, r6
 800220c:	6800      	ldr	r0, [r0, #0]
 800220e:	f7ff ffdd 	bl	80021cc <_swiread>
 8002212:	1c43      	adds	r3, r0, #1
 8002214:	bf1f      	itttt	ne
 8002216:	6863      	ldrne	r3, [r4, #4]
 8002218:	1a28      	subne	r0, r5, r0
 800221a:	181b      	addne	r3, r3, r0
 800221c:	6063      	strne	r3, [r4, #4]
 800221e:	e7f2      	b.n	8002206 <_read+0x1a>

08002220 <_swilseek>:
 8002220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002222:	460c      	mov	r4, r1
 8002224:	4616      	mov	r6, r2
 8002226:	f7ff ff99 	bl	800215c <findslot>
 800222a:	4605      	mov	r5, r0
 800222c:	b940      	cbnz	r0, 8002240 <_swilseek+0x20>
 800222e:	f7ff fafb 	bl	8001828 <__errno>
 8002232:	2309      	movs	r3, #9
 8002234:	6003      	str	r3, [r0, #0]
 8002236:	f04f 34ff 	mov.w	r4, #4294967295
 800223a:	4620      	mov	r0, r4
 800223c:	b003      	add	sp, #12
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002240:	2e02      	cmp	r6, #2
 8002242:	d903      	bls.n	800224c <_swilseek+0x2c>
 8002244:	f7ff faf0 	bl	8001828 <__errno>
 8002248:	2316      	movs	r3, #22
 800224a:	e7f3      	b.n	8002234 <_swilseek+0x14>
 800224c:	2e01      	cmp	r6, #1
 800224e:	d112      	bne.n	8002276 <_swilseek+0x56>
 8002250:	6843      	ldr	r3, [r0, #4]
 8002252:	18e4      	adds	r4, r4, r3
 8002254:	d4f6      	bmi.n	8002244 <_swilseek+0x24>
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	260a      	movs	r6, #10
 800225a:	e9cd 3400 	strd	r3, r4, [sp]
 800225e:	466f      	mov	r7, sp
 8002260:	4630      	mov	r0, r6
 8002262:	4639      	mov	r1, r7
 8002264:	beab      	bkpt	0x00ab
 8002266:	4606      	mov	r6, r0
 8002268:	4630      	mov	r0, r6
 800226a:	f7ff ff91 	bl	8002190 <checkerror>
 800226e:	2800      	cmp	r0, #0
 8002270:	dbe1      	blt.n	8002236 <_swilseek+0x16>
 8002272:	606c      	str	r4, [r5, #4]
 8002274:	e7e1      	b.n	800223a <_swilseek+0x1a>
 8002276:	2e02      	cmp	r6, #2
 8002278:	d1ed      	bne.n	8002256 <_swilseek+0x36>
 800227a:	af02      	add	r7, sp, #8
 800227c:	6803      	ldr	r3, [r0, #0]
 800227e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8002282:	260c      	movs	r6, #12
 8002284:	4630      	mov	r0, r6
 8002286:	4639      	mov	r1, r7
 8002288:	beab      	bkpt	0x00ab
 800228a:	4606      	mov	r6, r0
 800228c:	4630      	mov	r0, r6
 800228e:	f7ff ff7f 	bl	8002190 <checkerror>
 8002292:	1c43      	adds	r3, r0, #1
 8002294:	d0cf      	beq.n	8002236 <_swilseek+0x16>
 8002296:	4404      	add	r4, r0
 8002298:	e7dd      	b.n	8002256 <_swilseek+0x36>

0800229a <_lseek>:
 800229a:	f7ff bfc1 	b.w	8002220 <_swilseek>

0800229e <_swiwrite>:
 800229e:	b530      	push	{r4, r5, lr}
 80022a0:	b085      	sub	sp, #20
 80022a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80022a6:	9203      	str	r2, [sp, #12]
 80022a8:	2405      	movs	r4, #5
 80022aa:	ad01      	add	r5, sp, #4
 80022ac:	4620      	mov	r0, r4
 80022ae:	4629      	mov	r1, r5
 80022b0:	beab      	bkpt	0x00ab
 80022b2:	4604      	mov	r4, r0
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff ff6b 	bl	8002190 <checkerror>
 80022ba:	b005      	add	sp, #20
 80022bc:	bd30      	pop	{r4, r5, pc}

080022be <_write>:
 80022be:	b570      	push	{r4, r5, r6, lr}
 80022c0:	460e      	mov	r6, r1
 80022c2:	4615      	mov	r5, r2
 80022c4:	f7ff ff4a 	bl	800215c <findslot>
 80022c8:	4604      	mov	r4, r0
 80022ca:	b930      	cbnz	r0, 80022da <_write+0x1c>
 80022cc:	f7ff faac 	bl	8001828 <__errno>
 80022d0:	2309      	movs	r3, #9
 80022d2:	6003      	str	r3, [r0, #0]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	462a      	mov	r2, r5
 80022dc:	4631      	mov	r1, r6
 80022de:	6800      	ldr	r0, [r0, #0]
 80022e0:	f7ff ffdd 	bl	800229e <_swiwrite>
 80022e4:	1e02      	subs	r2, r0, #0
 80022e6:	dbf5      	blt.n	80022d4 <_write+0x16>
 80022e8:	6863      	ldr	r3, [r4, #4]
 80022ea:	1aa8      	subs	r0, r5, r2
 80022ec:	4403      	add	r3, r0
 80022ee:	42aa      	cmp	r2, r5
 80022f0:	6063      	str	r3, [r4, #4]
 80022f2:	d1f1      	bne.n	80022d8 <_write+0x1a>
 80022f4:	2000      	movs	r0, #0
 80022f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022fa:	f7ff bf59 	b.w	80021b0 <error>

080022fe <_swiclose>:
 80022fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002300:	ad02      	add	r5, sp, #8
 8002302:	2402      	movs	r4, #2
 8002304:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002308:	4620      	mov	r0, r4
 800230a:	4629      	mov	r1, r5
 800230c:	beab      	bkpt	0x00ab
 800230e:	4604      	mov	r4, r0
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff ff3d 	bl	8002190 <checkerror>
 8002316:	b003      	add	sp, #12
 8002318:	bd30      	pop	{r4, r5, pc}
	...

0800231c <_close>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4605      	mov	r5, r0
 8002320:	f7ff ff1c 	bl	800215c <findslot>
 8002324:	4604      	mov	r4, r0
 8002326:	b930      	cbnz	r0, 8002336 <_close+0x1a>
 8002328:	f7ff fa7e 	bl	8001828 <__errno>
 800232c:	2309      	movs	r3, #9
 800232e:	6003      	str	r3, [r0, #0]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	bd38      	pop	{r3, r4, r5, pc}
 8002336:	3d01      	subs	r5, #1
 8002338:	2d01      	cmp	r5, #1
 800233a:	d809      	bhi.n	8002350 <_close+0x34>
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <_close+0x48>)
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d104      	bne.n	8002350 <_close+0x34>
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	6003      	str	r3, [r0, #0]
 800234c:	2000      	movs	r0, #0
 800234e:	e7f1      	b.n	8002334 <_close+0x18>
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	f7ff ffd4 	bl	80022fe <_swiclose>
 8002356:	2800      	cmp	r0, #0
 8002358:	d1ec      	bne.n	8002334 <_close+0x18>
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	6023      	str	r3, [r4, #0]
 8002360:	e7e8      	b.n	8002334 <_close+0x18>
 8002362:	bf00      	nop
 8002364:	200000cc 	.word	0x200000cc

08002368 <_swistat>:
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	460c      	mov	r4, r1
 800236c:	f7ff fef6 	bl	800215c <findslot>
 8002370:	4606      	mov	r6, r0
 8002372:	b930      	cbnz	r0, 8002382 <_swistat+0x1a>
 8002374:	f7ff fa58 	bl	8001828 <__errno>
 8002378:	2309      	movs	r3, #9
 800237a:	6003      	str	r3, [r0, #0]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002388:	6063      	str	r3, [r4, #4]
 800238a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238e:	6463      	str	r3, [r4, #68]	; 0x44
 8002390:	250c      	movs	r5, #12
 8002392:	4628      	mov	r0, r5
 8002394:	4631      	mov	r1, r6
 8002396:	beab      	bkpt	0x00ab
 8002398:	4605      	mov	r5, r0
 800239a:	4628      	mov	r0, r5
 800239c:	f7ff fef8 	bl	8002190 <checkerror>
 80023a0:	1c43      	adds	r3, r0, #1
 80023a2:	bf1c      	itt	ne
 80023a4:	6120      	strne	r0, [r4, #16]
 80023a6:	2000      	movne	r0, #0
 80023a8:	e7ea      	b.n	8002380 <_swistat+0x18>

080023aa <_fstat>:
 80023aa:	460b      	mov	r3, r1
 80023ac:	b510      	push	{r4, lr}
 80023ae:	2100      	movs	r1, #0
 80023b0:	4604      	mov	r4, r0
 80023b2:	2258      	movs	r2, #88	; 0x58
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa61 	bl	800187c <memset>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4620      	mov	r0, r4
 80023be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c2:	f7ff bfd1 	b.w	8002368 <_swistat>

080023c6 <_stat>:
 80023c6:	b538      	push	{r3, r4, r5, lr}
 80023c8:	460d      	mov	r5, r1
 80023ca:	4604      	mov	r4, r0
 80023cc:	2258      	movs	r2, #88	; 0x58
 80023ce:	2100      	movs	r1, #0
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7ff fa53 	bl	800187c <memset>
 80023d6:	4620      	mov	r0, r4
 80023d8:	2100      	movs	r1, #0
 80023da:	f000 f811 	bl	8002400 <_swiopen>
 80023de:	1c43      	adds	r3, r0, #1
 80023e0:	4604      	mov	r4, r0
 80023e2:	d00b      	beq.n	80023fc <_stat+0x36>
 80023e4:	686b      	ldr	r3, [r5, #4]
 80023e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80023ea:	606b      	str	r3, [r5, #4]
 80023ec:	4629      	mov	r1, r5
 80023ee:	f7ff ffbb 	bl	8002368 <_swistat>
 80023f2:	4605      	mov	r5, r0
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff ff91 	bl	800231c <_close>
 80023fa:	462c      	mov	r4, r5
 80023fc:	4620      	mov	r0, r4
 80023fe:	bd38      	pop	{r3, r4, r5, pc}

08002400 <_swiopen>:
 8002400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <_swiopen+0xb4>)
 8002406:	b096      	sub	sp, #88	; 0x58
 8002408:	4682      	mov	sl, r0
 800240a:	460e      	mov	r6, r1
 800240c:	2500      	movs	r5, #0
 800240e:	4698      	mov	r8, r3
 8002410:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002414:	1c61      	adds	r1, r4, #1
 8002416:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 800241a:	d036      	beq.n	800248a <_swiopen+0x8a>
 800241c:	3501      	adds	r5, #1
 800241e:	2d14      	cmp	r5, #20
 8002420:	d1f6      	bne.n	8002410 <_swiopen+0x10>
 8002422:	f7ff fa01 	bl	8001828 <__errno>
 8002426:	2318      	movs	r3, #24
 8002428:	6003      	str	r3, [r0, #0]
 800242a:	f04f 34ff 	mov.w	r4, #4294967295
 800242e:	e03c      	b.n	80024aa <_swiopen+0xaa>
 8002430:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002434:	f240 6301 	movw	r3, #1537	; 0x601
 8002438:	07b2      	lsls	r2, r6, #30
 800243a:	bf48      	it	mi
 800243c:	f044 0402 	orrmi.w	r4, r4, #2
 8002440:	421e      	tst	r6, r3
 8002442:	bf18      	it	ne
 8002444:	f044 0404 	orrne.w	r4, r4, #4
 8002448:	0733      	lsls	r3, r6, #28
 800244a:	bf48      	it	mi
 800244c:	f024 0404 	bicmi.w	r4, r4, #4
 8002450:	4650      	mov	r0, sl
 8002452:	bf48      	it	mi
 8002454:	f044 0408 	orrmi.w	r4, r4, #8
 8002458:	f8cd a000 	str.w	sl, [sp]
 800245c:	f7fd fec4 	bl	80001e8 <strlen>
 8002460:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002464:	2401      	movs	r4, #1
 8002466:	4620      	mov	r0, r4
 8002468:	4649      	mov	r1, r9
 800246a:	beab      	bkpt	0x00ab
 800246c:	4604      	mov	r4, r0
 800246e:	2c00      	cmp	r4, #0
 8002470:	db06      	blt.n	8002480 <_swiopen+0x80>
 8002472:	4447      	add	r7, r8
 8002474:	2300      	movs	r3, #0
 8002476:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	462c      	mov	r4, r5
 800247e:	e014      	b.n	80024aa <_swiopen+0xaa>
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff fe95 	bl	80021b0 <error>
 8002486:	4604      	mov	r4, r0
 8002488:	e00f      	b.n	80024aa <_swiopen+0xaa>
 800248a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800248e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002492:	46e9      	mov	r9, sp
 8002494:	d1cc      	bne.n	8002430 <_swiopen+0x30>
 8002496:	4649      	mov	r1, r9
 8002498:	4650      	mov	r0, sl
 800249a:	f7ff ff94 	bl	80023c6 <_stat>
 800249e:	3001      	adds	r0, #1
 80024a0:	d0c6      	beq.n	8002430 <_swiopen+0x30>
 80024a2:	f7ff f9c1 	bl	8001828 <__errno>
 80024a6:	2311      	movs	r3, #17
 80024a8:	6003      	str	r3, [r0, #0]
 80024aa:	4620      	mov	r0, r4
 80024ac:	b016      	add	sp, #88	; 0x58
 80024ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024b2:	bf00      	nop
 80024b4:	200000cc 	.word	0x200000cc

080024b8 <_get_semihosting_exts>:
 80024b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80024bc:	4607      	mov	r7, r0
 80024be:	4688      	mov	r8, r1
 80024c0:	4829      	ldr	r0, [pc, #164]	; (8002568 <_get_semihosting_exts+0xb0>)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4615      	mov	r5, r2
 80024c6:	f7ff ff9b 	bl	8002400 <_swiopen>
 80024ca:	462a      	mov	r2, r5
 80024cc:	4604      	mov	r4, r0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4638      	mov	r0, r7
 80024d2:	f7ff f9d3 	bl	800187c <memset>
 80024d6:	1c63      	adds	r3, r4, #1
 80024d8:	d015      	beq.n	8002506 <_get_semihosting_exts+0x4e>
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff fe3e 	bl	800215c <findslot>
 80024e0:	260c      	movs	r6, #12
 80024e2:	4681      	mov	r9, r0
 80024e4:	4630      	mov	r0, r6
 80024e6:	4649      	mov	r1, r9
 80024e8:	beab      	bkpt	0x00ab
 80024ea:	4606      	mov	r6, r0
 80024ec:	4630      	mov	r0, r6
 80024ee:	f7ff fe4f 	bl	8002190 <checkerror>
 80024f2:	2803      	cmp	r0, #3
 80024f4:	dd02      	ble.n	80024fc <_get_semihosting_exts+0x44>
 80024f6:	3803      	subs	r0, #3
 80024f8:	42a8      	cmp	r0, r5
 80024fa:	dc08      	bgt.n	800250e <_get_semihosting_exts+0x56>
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff ff0d 	bl	800231c <_close>
 8002502:	f04f 34ff 	mov.w	r4, #4294967295
 8002506:	4620      	mov	r0, r4
 8002508:	b003      	add	sp, #12
 800250a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800250e:	2204      	movs	r2, #4
 8002510:	eb0d 0102 	add.w	r1, sp, r2
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fe69 	bl	80021ec <_read>
 800251a:	2803      	cmp	r0, #3
 800251c:	ddee      	ble.n	80024fc <_get_semihosting_exts+0x44>
 800251e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002522:	2b53      	cmp	r3, #83	; 0x53
 8002524:	d1ea      	bne.n	80024fc <_get_semihosting_exts+0x44>
 8002526:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800252a:	2b48      	cmp	r3, #72	; 0x48
 800252c:	d1e6      	bne.n	80024fc <_get_semihosting_exts+0x44>
 800252e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002532:	2b46      	cmp	r3, #70	; 0x46
 8002534:	d1e2      	bne.n	80024fc <_get_semihosting_exts+0x44>
 8002536:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800253a:	2b42      	cmp	r3, #66	; 0x42
 800253c:	d1de      	bne.n	80024fc <_get_semihosting_exts+0x44>
 800253e:	2201      	movs	r2, #1
 8002540:	4641      	mov	r1, r8
 8002542:	4620      	mov	r0, r4
 8002544:	f7ff fe6c 	bl	8002220 <_swilseek>
 8002548:	2800      	cmp	r0, #0
 800254a:	dbd7      	blt.n	80024fc <_get_semihosting_exts+0x44>
 800254c:	462a      	mov	r2, r5
 800254e:	4639      	mov	r1, r7
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff fe4b 	bl	80021ec <_read>
 8002556:	4605      	mov	r5, r0
 8002558:	4620      	mov	r0, r4
 800255a:	f7ff fedf 	bl	800231c <_close>
 800255e:	4628      	mov	r0, r5
 8002560:	f7ff fe16 	bl	8002190 <checkerror>
 8002564:	4604      	mov	r4, r0
 8002566:	e7ce      	b.n	8002506 <_get_semihosting_exts+0x4e>
 8002568:	080027b0 	.word	0x080027b0

0800256c <initialise_semihosting_exts>:
 800256c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800256e:	4d0a      	ldr	r5, [pc, #40]	; (8002598 <initialise_semihosting_exts+0x2c>)
 8002570:	4c0a      	ldr	r4, [pc, #40]	; (800259c <initialise_semihosting_exts+0x30>)
 8002572:	2100      	movs	r1, #0
 8002574:	2201      	movs	r2, #1
 8002576:	a801      	add	r0, sp, #4
 8002578:	6029      	str	r1, [r5, #0]
 800257a:	6022      	str	r2, [r4, #0]
 800257c:	f7ff ff9c 	bl	80024b8 <_get_semihosting_exts>
 8002580:	2800      	cmp	r0, #0
 8002582:	dd07      	ble.n	8002594 <initialise_semihosting_exts+0x28>
 8002584:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002588:	f003 0201 	and.w	r2, r3, #1
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	602a      	str	r2, [r5, #0]
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	b003      	add	sp, #12
 8002596:	bd30      	pop	{r4, r5, pc}
 8002598:	20000078 	.word	0x20000078
 800259c:	2000007c 	.word	0x2000007c

080025a0 <_has_ext_stdout_stderr>:
 80025a0:	b510      	push	{r4, lr}
 80025a2:	4c04      	ldr	r4, [pc, #16]	; (80025b4 <_has_ext_stdout_stderr+0x14>)
 80025a4:	6822      	ldr	r2, [r4, #0]
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	da01      	bge.n	80025ae <_has_ext_stdout_stderr+0xe>
 80025aa:	f7ff ffdf 	bl	800256c <initialise_semihosting_exts>
 80025ae:	6820      	ldr	r0, [r4, #0]
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	bf00      	nop
 80025b4:	2000007c 	.word	0x2000007c

080025b8 <initialise_monitor_handles>:
 80025b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	b085      	sub	sp, #20
 80025be:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002670 <initialise_monitor_handles+0xb8>
 80025c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80025c6:	2303      	movs	r3, #3
 80025c8:	2400      	movs	r4, #0
 80025ca:	9303      	str	r3, [sp, #12]
 80025cc:	f10d 0804 	add.w	r8, sp, #4
 80025d0:	9402      	str	r4, [sp, #8]
 80025d2:	2501      	movs	r5, #1
 80025d4:	4628      	mov	r0, r5
 80025d6:	4641      	mov	r1, r8
 80025d8:	beab      	bkpt	0x00ab
 80025da:	4605      	mov	r5, r0
 80025dc:	4e20      	ldr	r6, [pc, #128]	; (8002660 <initialise_monitor_handles+0xa8>)
 80025de:	4a21      	ldr	r2, [pc, #132]	; (8002664 <initialise_monitor_handles+0xac>)
 80025e0:	6035      	str	r5, [r6, #0]
 80025e2:	4623      	mov	r3, r4
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	4614      	mov	r4, r2
 80025ea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80025ee:	3301      	adds	r3, #1
 80025f0:	2b14      	cmp	r3, #20
 80025f2:	d1fa      	bne.n	80025ea <initialise_monitor_handles+0x32>
 80025f4:	f7ff ffd4 	bl	80025a0 <_has_ext_stdout_stderr>
 80025f8:	4d1b      	ldr	r5, [pc, #108]	; (8002668 <initialise_monitor_handles+0xb0>)
 80025fa:	b1d0      	cbz	r0, 8002632 <initialise_monitor_handles+0x7a>
 80025fc:	f04f 0a03 	mov.w	sl, #3
 8002600:	2304      	movs	r3, #4
 8002602:	f8cd 9004 	str.w	r9, [sp, #4]
 8002606:	2701      	movs	r7, #1
 8002608:	f8cd a00c 	str.w	sl, [sp, #12]
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	4638      	mov	r0, r7
 8002610:	4641      	mov	r1, r8
 8002612:	beab      	bkpt	0x00ab
 8002614:	4683      	mov	fp, r0
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <initialise_monitor_handles+0xb4>)
 8002618:	f8cd 9004 	str.w	r9, [sp, #4]
 800261c:	f8c3 b000 	str.w	fp, [r3]
 8002620:	2308      	movs	r3, #8
 8002622:	f8cd a00c 	str.w	sl, [sp, #12]
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	4638      	mov	r0, r7
 800262a:	4641      	mov	r1, r8
 800262c:	beab      	bkpt	0x00ab
 800262e:	4607      	mov	r7, r0
 8002630:	602f      	str	r7, [r5, #0]
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	bf02      	ittt	eq
 8002638:	4b0c      	ldreq	r3, [pc, #48]	; (800266c <initialise_monitor_handles+0xb4>)
 800263a:	681b      	ldreq	r3, [r3, #0]
 800263c:	602b      	streq	r3, [r5, #0]
 800263e:	6833      	ldr	r3, [r6, #0]
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	2600      	movs	r6, #0
 8002644:	6066      	str	r6, [r4, #4]
 8002646:	f7ff ffab 	bl	80025a0 <_has_ext_stdout_stderr>
 800264a:	b130      	cbz	r0, 800265a <initialise_monitor_handles+0xa2>
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <initialise_monitor_handles+0xb4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800265a:	b005      	add	sp, #20
 800265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002660:	200000c4 	.word	0x200000c4
 8002664:	200000cc 	.word	0x200000cc
 8002668:	200000c0 	.word	0x200000c0
 800266c:	200000c8 	.word	0x200000c8
 8002670:	080027c6 	.word	0x080027c6

08002674 <_isatty>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	f7ff fd71 	bl	800215c <findslot>
 800267a:	2509      	movs	r5, #9
 800267c:	4604      	mov	r4, r0
 800267e:	b920      	cbnz	r0, 800268a <_isatty+0x16>
 8002680:	f7ff f8d2 	bl	8001828 <__errno>
 8002684:	6005      	str	r5, [r0, #0]
 8002686:	4620      	mov	r0, r4
 8002688:	bd70      	pop	{r4, r5, r6, pc}
 800268a:	4628      	mov	r0, r5
 800268c:	4621      	mov	r1, r4
 800268e:	beab      	bkpt	0x00ab
 8002690:	4604      	mov	r4, r0
 8002692:	2c01      	cmp	r4, #1
 8002694:	d0f7      	beq.n	8002686 <_isatty+0x12>
 8002696:	f7ff f8c7 	bl	8001828 <__errno>
 800269a:	2400      	movs	r4, #0
 800269c:	4606      	mov	r6, r0
 800269e:	2513      	movs	r5, #19
 80026a0:	4628      	mov	r0, r5
 80026a2:	4621      	mov	r1, r4
 80026a4:	beab      	bkpt	0x00ab
 80026a6:	4605      	mov	r5, r0
 80026a8:	6035      	str	r5, [r6, #0]
 80026aa:	e7ec      	b.n	8002686 <_isatty+0x12>

080026ac <_init>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr

080026b8 <_fini>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr
